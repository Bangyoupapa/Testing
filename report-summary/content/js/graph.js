/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 190.0, "minX": 0.0, "maxY": 4681.0, "series": [{"data": [[0.0, 190.0], [0.1, 191.0], [0.2, 191.0], [0.3, 191.0], [0.4, 191.0], [0.5, 192.0], [0.6, 192.0], [0.7, 192.0], [0.8, 192.0], [0.9, 192.0], [1.0, 192.0], [1.1, 193.0], [1.2, 193.0], [1.3, 193.0], [1.4, 193.0], [1.5, 193.0], [1.6, 193.0], [1.7, 193.0], [1.8, 193.0], [1.9, 193.0], [2.0, 193.0], [2.1, 193.0], [2.2, 193.0], [2.3, 194.0], [2.4, 194.0], [2.5, 194.0], [2.6, 194.0], [2.7, 194.0], [2.8, 194.0], [2.9, 194.0], [3.0, 194.0], [3.1, 194.0], [3.2, 194.0], [3.3, 194.0], [3.4, 194.0], [3.5, 194.0], [3.6, 194.0], [3.7, 194.0], [3.8, 194.0], [3.9, 194.0], [4.0, 195.0], [4.1, 195.0], [4.2, 195.0], [4.3, 195.0], [4.4, 195.0], [4.5, 195.0], [4.6, 195.0], [4.7, 195.0], [4.8, 195.0], [4.9, 195.0], [5.0, 195.0], [5.1, 195.0], [5.2, 195.0], [5.3, 195.0], [5.4, 195.0], [5.5, 195.0], [5.6, 195.0], [5.7, 195.0], [5.8, 195.0], [5.9, 195.0], [6.0, 195.0], [6.1, 196.0], [6.2, 196.0], [6.3, 196.0], [6.4, 196.0], [6.5, 196.0], [6.6, 196.0], [6.7, 196.0], [6.8, 196.0], [6.9, 196.0], [7.0, 196.0], [7.1, 196.0], [7.2, 196.0], [7.3, 196.0], [7.4, 196.0], [7.5, 196.0], [7.6, 196.0], [7.7, 196.0], [7.8, 196.0], [7.9, 196.0], [8.0, 196.0], [8.1, 196.0], [8.2, 197.0], [8.3, 197.0], [8.4, 197.0], [8.5, 197.0], [8.6, 197.0], [8.7, 197.0], [8.8, 197.0], [8.9, 197.0], [9.0, 197.0], [9.1, 197.0], [9.2, 197.0], [9.3, 197.0], [9.4, 197.0], [9.5, 197.0], [9.6, 197.0], [9.7, 197.0], [9.8, 197.0], [9.9, 197.0], [10.0, 197.0], [10.1, 197.0], [10.2, 197.0], [10.3, 197.0], [10.4, 197.0], [10.5, 197.0], [10.6, 197.0], [10.7, 198.0], [10.8, 198.0], [10.9, 198.0], [11.0, 198.0], [11.1, 198.0], [11.2, 198.0], [11.3, 198.0], [11.4, 198.0], [11.5, 198.0], [11.6, 198.0], [11.7, 198.0], [11.8, 198.0], [11.9, 198.0], [12.0, 198.0], [12.1, 198.0], [12.2, 198.0], [12.3, 198.0], [12.4, 198.0], [12.5, 198.0], [12.6, 198.0], [12.7, 198.0], [12.8, 198.0], [12.9, 198.0], [13.0, 199.0], [13.1, 199.0], [13.2, 199.0], [13.3, 199.0], [13.4, 199.0], [13.5, 199.0], [13.6, 199.0], [13.7, 199.0], [13.8, 199.0], [13.9, 199.0], [14.0, 199.0], [14.1, 199.0], [14.2, 199.0], [14.3, 199.0], [14.4, 199.0], [14.5, 199.0], [14.6, 199.0], [14.7, 199.0], [14.8, 199.0], [14.9, 199.0], [15.0, 199.0], [15.1, 199.0], [15.2, 199.0], [15.3, 199.0], [15.4, 199.0], [15.5, 199.0], [15.6, 200.0], [15.7, 200.0], [15.8, 200.0], [15.9, 200.0], [16.0, 200.0], [16.1, 200.0], [16.2, 200.0], [16.3, 200.0], [16.4, 200.0], [16.5, 200.0], [16.6, 200.0], [16.7, 200.0], [16.8, 200.0], [16.9, 200.0], [17.0, 200.0], [17.1, 200.0], [17.2, 200.0], [17.3, 200.0], [17.4, 200.0], [17.5, 200.0], [17.6, 200.0], [17.7, 200.0], [17.8, 200.0], [17.9, 200.0], [18.0, 200.0], [18.1, 201.0], [18.2, 201.0], [18.3, 201.0], [18.4, 201.0], [18.5, 201.0], [18.6, 201.0], [18.7, 201.0], [18.8, 201.0], [18.9, 201.0], [19.0, 201.0], [19.1, 201.0], [19.2, 201.0], [19.3, 201.0], [19.4, 201.0], [19.5, 201.0], [19.6, 201.0], [19.7, 201.0], [19.8, 201.0], [19.9, 201.0], [20.0, 201.0], [20.1, 201.0], [20.2, 201.0], [20.3, 201.0], [20.4, 201.0], [20.5, 201.0], [20.6, 202.0], [20.7, 202.0], [20.8, 202.0], [20.9, 202.0], [21.0, 202.0], [21.1, 202.0], [21.2, 202.0], [21.3, 202.0], [21.4, 202.0], [21.5, 202.0], [21.6, 202.0], [21.7, 202.0], [21.8, 202.0], [21.9, 202.0], [22.0, 202.0], [22.1, 202.0], [22.2, 202.0], [22.3, 202.0], [22.4, 202.0], [22.5, 202.0], [22.6, 202.0], [22.7, 202.0], [22.8, 203.0], [22.9, 203.0], [23.0, 203.0], [23.1, 203.0], [23.2, 203.0], [23.3, 203.0], [23.4, 203.0], [23.5, 203.0], [23.6, 203.0], [23.7, 203.0], [23.8, 203.0], [23.9, 203.0], [24.0, 203.0], [24.1, 203.0], [24.2, 203.0], [24.3, 203.0], [24.4, 203.0], [24.5, 203.0], [24.6, 203.0], [24.7, 203.0], [24.8, 203.0], [24.9, 203.0], [25.0, 203.0], [25.1, 204.0], [25.2, 204.0], [25.3, 204.0], [25.4, 204.0], [25.5, 204.0], [25.6, 204.0], [25.7, 204.0], [25.8, 204.0], [25.9, 204.0], [26.0, 204.0], [26.1, 204.0], [26.2, 204.0], [26.3, 204.0], [26.4, 204.0], [26.5, 204.0], [26.6, 204.0], [26.7, 204.0], [26.8, 204.0], [26.9, 204.0], [27.0, 204.0], [27.1, 204.0], [27.2, 204.0], [27.3, 205.0], [27.4, 205.0], [27.5, 205.0], [27.6, 205.0], [27.7, 205.0], [27.8, 205.0], [27.9, 205.0], [28.0, 205.0], [28.1, 205.0], [28.2, 205.0], [28.3, 205.0], [28.4, 205.0], [28.5, 205.0], [28.6, 205.0], [28.7, 205.0], [28.8, 205.0], [28.9, 205.0], [29.0, 205.0], [29.1, 205.0], [29.2, 205.0], [29.3, 205.0], [29.4, 206.0], [29.5, 206.0], [29.6, 206.0], [29.7, 206.0], [29.8, 206.0], [29.9, 206.0], [30.0, 206.0], [30.1, 206.0], [30.2, 206.0], [30.3, 206.0], [30.4, 206.0], [30.5, 206.0], [30.6, 206.0], [30.7, 206.0], [30.8, 206.0], [30.9, 206.0], [31.0, 206.0], [31.1, 206.0], [31.2, 206.0], [31.3, 207.0], [31.4, 207.0], [31.5, 207.0], [31.6, 207.0], [31.7, 207.0], [31.8, 207.0], [31.9, 207.0], [32.0, 207.0], [32.1, 207.0], [32.2, 207.0], [32.3, 207.0], [32.4, 207.0], [32.5, 207.0], [32.6, 207.0], [32.7, 207.0], [32.8, 207.0], [32.9, 207.0], [33.0, 207.0], [33.1, 207.0], [33.2, 207.0], [33.3, 207.0], [33.4, 208.0], [33.5, 208.0], [33.6, 208.0], [33.7, 208.0], [33.8, 208.0], [33.9, 208.0], [34.0, 208.0], [34.1, 208.0], [34.2, 208.0], [34.3, 208.0], [34.4, 208.0], [34.5, 208.0], [34.6, 208.0], [34.7, 208.0], [34.8, 208.0], [34.9, 208.0], [35.0, 208.0], [35.1, 208.0], [35.2, 209.0], [35.3, 209.0], [35.4, 209.0], [35.5, 209.0], [35.6, 209.0], [35.7, 209.0], [35.8, 209.0], [35.9, 209.0], [36.0, 209.0], [36.1, 209.0], [36.2, 209.0], [36.3, 209.0], [36.4, 209.0], [36.5, 209.0], [36.6, 209.0], [36.7, 209.0], [36.8, 209.0], [36.9, 210.0], [37.0, 210.0], [37.1, 210.0], [37.2, 210.0], [37.3, 210.0], [37.4, 210.0], [37.5, 210.0], [37.6, 210.0], [37.7, 210.0], [37.8, 210.0], [37.9, 210.0], [38.0, 210.0], [38.1, 210.0], [38.2, 210.0], [38.3, 210.0], [38.4, 210.0], [38.5, 210.0], [38.6, 211.0], [38.7, 211.0], [38.8, 211.0], [38.9, 211.0], [39.0, 211.0], [39.1, 211.0], [39.2, 211.0], [39.3, 211.0], [39.4, 211.0], [39.5, 211.0], [39.6, 211.0], [39.7, 211.0], [39.8, 211.0], [39.9, 211.0], [40.0, 211.0], [40.1, 211.0], [40.2, 211.0], [40.3, 211.0], [40.4, 212.0], [40.5, 212.0], [40.6, 212.0], [40.7, 212.0], [40.8, 212.0], [40.9, 212.0], [41.0, 212.0], [41.1, 212.0], [41.2, 212.0], [41.3, 212.0], [41.4, 212.0], [41.5, 212.0], [41.6, 212.0], [41.7, 213.0], [41.8, 213.0], [41.9, 213.0], [42.0, 213.0], [42.1, 213.0], [42.2, 213.0], [42.3, 213.0], [42.4, 213.0], [42.5, 213.0], [42.6, 213.0], [42.7, 213.0], [42.8, 213.0], [42.9, 213.0], [43.0, 213.0], [43.1, 213.0], [43.2, 213.0], [43.3, 214.0], [43.4, 214.0], [43.5, 214.0], [43.6, 214.0], [43.7, 214.0], [43.8, 214.0], [43.9, 214.0], [44.0, 214.0], [44.1, 214.0], [44.2, 214.0], [44.3, 214.0], [44.4, 214.0], [44.5, 214.0], [44.6, 214.0], [44.7, 214.0], [44.8, 215.0], [44.9, 215.0], [45.0, 215.0], [45.1, 215.0], [45.2, 215.0], [45.3, 215.0], [45.4, 215.0], [45.5, 215.0], [45.6, 215.0], [45.7, 215.0], [45.8, 215.0], [45.9, 215.0], [46.0, 215.0], [46.1, 216.0], [46.2, 216.0], [46.3, 216.0], [46.4, 216.0], [46.5, 216.0], [46.6, 216.0], [46.7, 216.0], [46.8, 216.0], [46.9, 216.0], [47.0, 216.0], [47.1, 216.0], [47.2, 216.0], [47.3, 217.0], [47.4, 217.0], [47.5, 217.0], [47.6, 217.0], [47.7, 217.0], [47.8, 217.0], [47.9, 217.0], [48.0, 217.0], [48.1, 217.0], [48.2, 217.0], [48.3, 217.0], [48.4, 218.0], [48.5, 218.0], [48.6, 218.0], [48.7, 218.0], [48.8, 218.0], [48.9, 218.0], [49.0, 218.0], [49.1, 218.0], [49.2, 218.0], [49.3, 218.0], [49.4, 218.0], [49.5, 218.0], [49.6, 219.0], [49.7, 219.0], [49.8, 219.0], [49.9, 219.0], [50.0, 219.0], [50.1, 219.0], [50.2, 219.0], [50.3, 219.0], [50.4, 219.0], [50.5, 219.0], [50.6, 219.0], [50.7, 220.0], [50.8, 220.0], [50.9, 220.0], [51.0, 220.0], [51.1, 220.0], [51.2, 220.0], [51.3, 220.0], [51.4, 220.0], [51.5, 220.0], [51.6, 220.0], [51.7, 220.0], [51.8, 221.0], [51.9, 221.0], [52.0, 221.0], [52.1, 221.0], [52.2, 221.0], [52.3, 221.0], [52.4, 221.0], [52.5, 221.0], [52.6, 221.0], [52.7, 221.0], [52.8, 222.0], [52.9, 222.0], [53.0, 222.0], [53.1, 222.0], [53.2, 222.0], [53.3, 222.0], [53.4, 222.0], [53.5, 222.0], [53.6, 222.0], [53.7, 223.0], [53.8, 223.0], [53.9, 223.0], [54.0, 223.0], [54.1, 223.0], [54.2, 223.0], [54.3, 223.0], [54.4, 223.0], [54.5, 224.0], [54.6, 224.0], [54.7, 224.0], [54.8, 224.0], [54.9, 224.0], [55.0, 224.0], [55.1, 224.0], [55.2, 224.0], [55.3, 225.0], [55.4, 225.0], [55.5, 225.0], [55.6, 225.0], [55.7, 225.0], [55.8, 225.0], [55.9, 225.0], [56.0, 225.0], [56.1, 225.0], [56.2, 226.0], [56.3, 226.0], [56.4, 226.0], [56.5, 226.0], [56.6, 226.0], [56.7, 226.0], [56.8, 226.0], [56.9, 227.0], [57.0, 227.0], [57.1, 227.0], [57.2, 227.0], [57.3, 227.0], [57.4, 227.0], [57.5, 227.0], [57.6, 227.0], [57.7, 227.0], [57.8, 228.0], [57.9, 228.0], [58.0, 228.0], [58.1, 228.0], [58.2, 228.0], [58.3, 228.0], [58.4, 228.0], [58.5, 229.0], [58.6, 229.0], [58.7, 229.0], [58.8, 229.0], [58.9, 229.0], [59.0, 229.0], [59.1, 229.0], [59.2, 230.0], [59.3, 230.0], [59.4, 230.0], [59.5, 230.0], [59.6, 230.0], [59.7, 230.0], [59.8, 230.0], [59.9, 231.0], [60.0, 231.0], [60.1, 231.0], [60.2, 231.0], [60.3, 231.0], [60.4, 231.0], [60.5, 232.0], [60.6, 232.0], [60.7, 232.0], [60.8, 232.0], [60.9, 232.0], [61.0, 232.0], [61.1, 233.0], [61.2, 233.0], [61.3, 233.0], [61.4, 233.0], [61.5, 233.0], [61.6, 233.0], [61.7, 234.0], [61.8, 234.0], [61.9, 234.0], [62.0, 234.0], [62.1, 235.0], [62.2, 235.0], [62.3, 235.0], [62.4, 235.0], [62.5, 235.0], [62.6, 236.0], [62.7, 236.0], [62.8, 236.0], [62.9, 236.0], [63.0, 236.0], [63.1, 237.0], [63.2, 237.0], [63.3, 237.0], [63.4, 237.0], [63.5, 238.0], [63.6, 238.0], [63.7, 238.0], [63.8, 238.0], [63.9, 238.0], [64.0, 239.0], [64.1, 239.0], [64.2, 239.0], [64.3, 239.0], [64.4, 239.0], [64.5, 240.0], [64.6, 240.0], [64.7, 240.0], [64.8, 240.0], [64.9, 241.0], [65.0, 241.0], [65.1, 241.0], [65.2, 241.0], [65.3, 242.0], [65.4, 242.0], [65.5, 242.0], [65.6, 242.0], [65.7, 242.0], [65.8, 243.0], [65.9, 243.0], [66.0, 243.0], [66.1, 243.0], [66.2, 243.0], [66.3, 244.0], [66.4, 244.0], [66.5, 244.0], [66.6, 245.0], [66.7, 245.0], [66.8, 245.0], [66.9, 245.0], [67.0, 246.0], [67.1, 246.0], [67.2, 246.0], [67.3, 246.0], [67.4, 247.0], [67.5, 247.0], [67.6, 247.0], [67.7, 247.0], [67.8, 248.0], [67.9, 248.0], [68.0, 248.0], [68.1, 249.0], [68.2, 249.0], [68.3, 249.0], [68.4, 250.0], [68.5, 250.0], [68.6, 250.0], [68.7, 250.0], [68.8, 251.0], [68.9, 251.0], [69.0, 251.0], [69.1, 252.0], [69.2, 252.0], [69.3, 252.0], [69.4, 253.0], [69.5, 253.0], [69.6, 254.0], [69.7, 254.0], [69.8, 254.0], [69.9, 255.0], [70.0, 255.0], [70.1, 256.0], [70.2, 256.0], [70.3, 256.0], [70.4, 257.0], [70.5, 257.0], [70.6, 258.0], [70.7, 258.0], [70.8, 258.0], [70.9, 259.0], [71.0, 259.0], [71.1, 260.0], [71.2, 260.0], [71.3, 260.0], [71.4, 261.0], [71.5, 261.0], [71.6, 262.0], [71.7, 262.0], [71.8, 263.0], [71.9, 263.0], [72.0, 264.0], [72.1, 264.0], [72.2, 265.0], [72.3, 265.0], [72.4, 266.0], [72.5, 266.0], [72.6, 267.0], [72.7, 267.0], [72.8, 268.0], [72.9, 269.0], [73.0, 269.0], [73.1, 270.0], [73.2, 270.0], [73.3, 271.0], [73.4, 271.0], [73.5, 272.0], [73.6, 273.0], [73.7, 273.0], [73.8, 274.0], [73.9, 275.0], [74.0, 275.0], [74.1, 276.0], [74.2, 277.0], [74.3, 278.0], [74.4, 279.0], [74.5, 279.0], [74.6, 280.0], [74.7, 280.0], [74.8, 281.0], [74.9, 282.0], [75.0, 282.0], [75.1, 283.0], [75.2, 284.0], [75.3, 284.0], [75.4, 285.0], [75.5, 285.0], [75.6, 286.0], [75.7, 287.0], [75.8, 288.0], [75.9, 289.0], [76.0, 290.0], [76.1, 291.0], [76.2, 292.0], [76.3, 293.0], [76.4, 294.0], [76.5, 295.0], [76.6, 297.0], [76.7, 298.0], [76.8, 299.0], [76.9, 300.0], [77.0, 302.0], [77.1, 303.0], [77.2, 304.0], [77.3, 305.0], [77.4, 306.0], [77.5, 308.0], [77.6, 309.0], [77.7, 311.0], [77.8, 312.0], [77.9, 314.0], [78.0, 315.0], [78.1, 318.0], [78.2, 319.0], [78.3, 321.0], [78.4, 324.0], [78.5, 325.0], [78.6, 328.0], [78.7, 332.0], [78.8, 335.0], [78.9, 338.0], [79.0, 340.0], [79.1, 344.0], [79.2, 349.0], [79.3, 353.0], [79.4, 357.0], [79.5, 364.0], [79.6, 369.0], [79.7, 376.0], [79.8, 386.0], [79.9, 394.0], [80.0, 403.0], [80.1, 419.0], [80.2, 435.0], [80.3, 460.0], [80.4, 481.0], [80.5, 498.0], [80.6, 499.0], [80.7, 501.0], [80.8, 502.0], [80.9, 503.0], [81.0, 503.0], [81.1, 504.0], [81.2, 504.0], [81.3, 505.0], [81.4, 505.0], [81.5, 506.0], [81.6, 507.0], [81.7, 507.0], [81.8, 508.0], [81.9, 508.0], [82.0, 509.0], [82.1, 509.0], [82.2, 509.0], [82.3, 510.0], [82.4, 510.0], [82.5, 511.0], [82.6, 511.0], [82.7, 512.0], [82.8, 512.0], [82.9, 513.0], [83.0, 513.0], [83.1, 514.0], [83.2, 514.0], [83.3, 515.0], [83.4, 515.0], [83.5, 516.0], [83.6, 516.0], [83.7, 517.0], [83.8, 517.0], [83.9, 517.0], [84.0, 518.0], [84.1, 519.0], [84.2, 519.0], [84.3, 520.0], [84.4, 520.0], [84.5, 521.0], [84.6, 521.0], [84.7, 522.0], [84.8, 522.0], [84.9, 523.0], [85.0, 524.0], [85.1, 525.0], [85.2, 526.0], [85.3, 526.0], [85.4, 527.0], [85.5, 528.0], [85.6, 529.0], [85.7, 530.0], [85.8, 531.0], [85.9, 533.0], [86.0, 534.0], [86.1, 535.0], [86.2, 536.0], [86.3, 538.0], [86.4, 539.0], [86.5, 540.0], [86.6, 541.0], [86.7, 543.0], [86.8, 545.0], [86.9, 548.0], [87.0, 551.0], [87.1, 552.0], [87.2, 554.0], [87.3, 557.0], [87.4, 561.0], [87.5, 563.0], [87.6, 566.0], [87.7, 570.0], [87.8, 575.0], [87.9, 582.0], [88.0, 587.0], [88.1, 593.0], [88.2, 598.0], [88.3, 609.0], [88.4, 625.0], [88.5, 637.0], [88.6, 655.0], [88.7, 657.0], [88.8, 658.0], [88.9, 659.0], [89.0, 660.0], [89.1, 660.0], [89.2, 661.0], [89.3, 661.0], [89.4, 662.0], [89.5, 662.0], [89.6, 662.0], [89.7, 663.0], [89.8, 663.0], [89.9, 664.0], [90.0, 664.0], [90.1, 664.0], [90.2, 665.0], [90.3, 665.0], [90.4, 665.0], [90.5, 666.0], [90.6, 666.0], [90.7, 666.0], [90.8, 667.0], [90.9, 667.0], [91.0, 667.0], [91.1, 668.0], [91.2, 668.0], [91.3, 668.0], [91.4, 669.0], [91.5, 669.0], [91.6, 669.0], [91.7, 670.0], [91.8, 670.0], [91.9, 670.0], [92.0, 671.0], [92.1, 671.0], [92.2, 671.0], [92.3, 672.0], [92.4, 672.0], [92.5, 672.0], [92.6, 673.0], [92.7, 673.0], [92.8, 673.0], [92.9, 674.0], [93.0, 674.0], [93.1, 674.0], [93.2, 675.0], [93.3, 675.0], [93.4, 676.0], [93.5, 676.0], [93.6, 677.0], [93.7, 677.0], [93.8, 678.0], [93.9, 678.0], [94.0, 679.0], [94.1, 679.0], [94.2, 680.0], [94.3, 680.0], [94.4, 681.0], [94.5, 681.0], [94.6, 682.0], [94.7, 682.0], [94.8, 683.0], [94.9, 683.0], [95.0, 684.0], [95.1, 684.0], [95.2, 685.0], [95.3, 686.0], [95.4, 686.0], [95.5, 687.0], [95.6, 687.0], [95.7, 688.0], [95.8, 689.0], [95.9, 690.0], [96.0, 690.0], [96.1, 691.0], [96.2, 692.0], [96.3, 693.0], [96.4, 694.0], [96.5, 695.0], [96.6, 696.0], [96.7, 697.0], [96.8, 699.0], [96.9, 701.0], [97.0, 702.0], [97.1, 703.0], [97.2, 704.0], [97.3, 706.0], [97.4, 707.0], [97.5, 709.0], [97.6, 711.0], [97.7, 713.0], [97.8, 716.0], [97.9, 718.0], [98.0, 721.0], [98.1, 723.0], [98.2, 726.0], [98.3, 730.0], [98.4, 733.0], [98.5, 736.0], [98.6, 739.0], [98.7, 743.0], [98.8, 748.0], [98.9, 754.0], [99.0, 760.0], [99.1, 766.0], [99.2, 772.0], [99.3, 782.0], [99.4, 792.0], [99.5, 806.0], [99.6, 818.0], [99.7, 867.0], [99.8, 945.0], [99.9, 1208.0], [100.0, 4681.0]], "isOverall": false, "label": "bots_request", "isController": false}, {"data": [[0.0, 197.0], [0.1, 199.0], [0.2, 199.0], [0.3, 200.0], [0.4, 200.0], [0.5, 200.0], [0.6, 200.0], [0.7, 200.0], [0.8, 201.0], [0.9, 201.0], [1.0, 201.0], [1.1, 201.0], [1.2, 201.0], [1.3, 201.0], [1.4, 201.0], [1.5, 201.0], [1.6, 202.0], [1.7, 202.0], [1.8, 202.0], [1.9, 202.0], [2.0, 202.0], [2.1, 202.0], [2.2, 202.0], [2.3, 202.0], [2.4, 202.0], [2.5, 202.0], [2.6, 202.0], [2.7, 203.0], [2.8, 203.0], [2.9, 203.0], [3.0, 203.0], [3.1, 203.0], [3.2, 203.0], [3.3, 203.0], [3.4, 203.0], [3.5, 203.0], [3.6, 203.0], [3.7, 203.0], [3.8, 203.0], [3.9, 203.0], [4.0, 203.0], [4.1, 204.0], [4.2, 204.0], [4.3, 204.0], [4.4, 204.0], [4.5, 204.0], [4.6, 204.0], [4.7, 204.0], [4.8, 204.0], [4.9, 204.0], [5.0, 204.0], [5.1, 204.0], [5.2, 204.0], [5.3, 204.0], [5.4, 204.0], [5.5, 204.0], [5.6, 204.0], [5.7, 204.0], [5.8, 205.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 205.0], [6.9, 205.0], [7.0, 205.0], [7.1, 205.0], [7.2, 205.0], [7.3, 205.0], [7.4, 205.0], [7.5, 205.0], [7.6, 205.0], [7.7, 205.0], [7.8, 205.0], [7.9, 206.0], [8.0, 206.0], [8.1, 206.0], [8.2, 206.0], [8.3, 206.0], [8.4, 206.0], [8.5, 206.0], [8.6, 206.0], [8.7, 206.0], [8.8, 206.0], [8.9, 206.0], [9.0, 206.0], [9.1, 206.0], [9.2, 206.0], [9.3, 206.0], [9.4, 206.0], [9.5, 206.0], [9.6, 206.0], [9.7, 207.0], [9.8, 207.0], [9.9, 207.0], [10.0, 207.0], [10.1, 207.0], [10.2, 207.0], [10.3, 207.0], [10.4, 207.0], [10.5, 207.0], [10.6, 207.0], [10.7, 207.0], [10.8, 207.0], [10.9, 207.0], [11.0, 207.0], [11.1, 207.0], [11.2, 207.0], [11.3, 207.0], [11.4, 207.0], [11.5, 207.0], [11.6, 207.0], [11.7, 207.0], [11.8, 207.0], [11.9, 207.0], [12.0, 208.0], [12.1, 208.0], [12.2, 208.0], [12.3, 208.0], [12.4, 208.0], [12.5, 208.0], [12.6, 208.0], [12.7, 208.0], [12.8, 208.0], [12.9, 208.0], [13.0, 208.0], [13.1, 208.0], [13.2, 208.0], [13.3, 208.0], [13.4, 208.0], [13.5, 208.0], [13.6, 208.0], [13.7, 208.0], [13.8, 208.0], [13.9, 208.0], [14.0, 208.0], [14.1, 209.0], [14.2, 209.0], [14.3, 209.0], [14.4, 209.0], [14.5, 209.0], [14.6, 209.0], [14.7, 209.0], [14.8, 209.0], [14.9, 209.0], [15.0, 209.0], [15.1, 209.0], [15.2, 209.0], [15.3, 209.0], [15.4, 209.0], [15.5, 209.0], [15.6, 209.0], [15.7, 209.0], [15.8, 209.0], [15.9, 209.0], [16.0, 209.0], [16.1, 209.0], [16.2, 209.0], [16.3, 209.0], [16.4, 210.0], [16.5, 210.0], [16.6, 210.0], [16.7, 210.0], [16.8, 210.0], [16.9, 210.0], [17.0, 210.0], [17.1, 210.0], [17.2, 210.0], [17.3, 210.0], [17.4, 210.0], [17.5, 210.0], [17.6, 210.0], [17.7, 210.0], [17.8, 210.0], [17.9, 210.0], [18.0, 210.0], [18.1, 210.0], [18.2, 210.0], [18.3, 210.0], [18.4, 210.0], [18.5, 211.0], [18.6, 211.0], [18.7, 211.0], [18.8, 211.0], [18.9, 211.0], [19.0, 211.0], [19.1, 211.0], [19.2, 211.0], [19.3, 211.0], [19.4, 211.0], [19.5, 211.0], [19.6, 211.0], [19.7, 211.0], [19.8, 211.0], [19.9, 211.0], [20.0, 211.0], [20.1, 211.0], [20.2, 211.0], [20.3, 211.0], [20.4, 211.0], [20.5, 211.0], [20.6, 212.0], [20.7, 212.0], [20.8, 212.0], [20.9, 212.0], [21.0, 212.0], [21.1, 212.0], [21.2, 212.0], [21.3, 212.0], [21.4, 212.0], [21.5, 212.0], [21.6, 212.0], [21.7, 212.0], [21.8, 212.0], [21.9, 212.0], [22.0, 212.0], [22.1, 212.0], [22.2, 212.0], [22.3, 212.0], [22.4, 212.0], [22.5, 212.0], [22.6, 212.0], [22.7, 213.0], [22.8, 213.0], [22.9, 213.0], [23.0, 213.0], [23.1, 213.0], [23.2, 213.0], [23.3, 213.0], [23.4, 213.0], [23.5, 213.0], [23.6, 213.0], [23.7, 213.0], [23.8, 213.0], [23.9, 213.0], [24.0, 213.0], [24.1, 213.0], [24.2, 213.0], [24.3, 213.0], [24.4, 213.0], [24.5, 213.0], [24.6, 213.0], [24.7, 213.0], [24.8, 213.0], [24.9, 214.0], [25.0, 214.0], [25.1, 214.0], [25.2, 214.0], [25.3, 214.0], [25.4, 214.0], [25.5, 214.0], [25.6, 214.0], [25.7, 214.0], [25.8, 214.0], [25.9, 214.0], [26.0, 214.0], [26.1, 214.0], [26.2, 214.0], [26.3, 214.0], [26.4, 214.0], [26.5, 214.0], [26.6, 214.0], [26.7, 214.0], [26.8, 214.0], [26.9, 215.0], [27.0, 215.0], [27.1, 215.0], [27.2, 215.0], [27.3, 215.0], [27.4, 215.0], [27.5, 215.0], [27.6, 215.0], [27.7, 215.0], [27.8, 215.0], [27.9, 215.0], [28.0, 215.0], [28.1, 215.0], [28.2, 215.0], [28.3, 215.0], [28.4, 215.0], [28.5, 215.0], [28.6, 215.0], [28.7, 215.0], [28.8, 215.0], [28.9, 215.0], [29.0, 216.0], [29.1, 216.0], [29.2, 216.0], [29.3, 216.0], [29.4, 216.0], [29.5, 216.0], [29.6, 216.0], [29.7, 216.0], [29.8, 216.0], [29.9, 216.0], [30.0, 216.0], [30.1, 216.0], [30.2, 216.0], [30.3, 216.0], [30.4, 216.0], [30.5, 216.0], [30.6, 216.0], [30.7, 217.0], [30.8, 217.0], [30.9, 217.0], [31.0, 217.0], [31.1, 217.0], [31.2, 217.0], [31.3, 217.0], [31.4, 217.0], [31.5, 217.0], [31.6, 217.0], [31.7, 217.0], [31.8, 217.0], [31.9, 217.0], [32.0, 217.0], [32.1, 217.0], [32.2, 217.0], [32.3, 217.0], [32.4, 217.0], [32.5, 217.0], [32.6, 218.0], [32.7, 218.0], [32.8, 218.0], [32.9, 218.0], [33.0, 218.0], [33.1, 218.0], [33.2, 218.0], [33.3, 218.0], [33.4, 218.0], [33.5, 218.0], [33.6, 218.0], [33.7, 218.0], [33.8, 218.0], [33.9, 218.0], [34.0, 218.0], [34.1, 218.0], [34.2, 218.0], [34.3, 219.0], [34.4, 219.0], [34.5, 219.0], [34.6, 219.0], [34.7, 219.0], [34.8, 219.0], [34.9, 219.0], [35.0, 219.0], [35.1, 219.0], [35.2, 219.0], [35.3, 219.0], [35.4, 219.0], [35.5, 219.0], [35.6, 219.0], [35.7, 219.0], [35.8, 219.0], [35.9, 220.0], [36.0, 220.0], [36.1, 220.0], [36.2, 220.0], [36.3, 220.0], [36.4, 220.0], [36.5, 220.0], [36.6, 220.0], [36.7, 220.0], [36.8, 220.0], [36.9, 220.0], [37.0, 220.0], [37.1, 220.0], [37.2, 220.0], [37.3, 220.0], [37.4, 220.0], [37.5, 220.0], [37.6, 220.0], [37.7, 221.0], [37.8, 221.0], [37.9, 221.0], [38.0, 221.0], [38.1, 221.0], [38.2, 221.0], [38.3, 221.0], [38.4, 221.0], [38.5, 221.0], [38.6, 221.0], [38.7, 221.0], [38.8, 221.0], [38.9, 221.0], [39.0, 221.0], [39.1, 221.0], [39.2, 221.0], [39.3, 222.0], [39.4, 222.0], [39.5, 222.0], [39.6, 222.0], [39.7, 222.0], [39.8, 222.0], [39.9, 222.0], [40.0, 222.0], [40.1, 222.0], [40.2, 222.0], [40.3, 222.0], [40.4, 222.0], [40.5, 222.0], [40.6, 222.0], [40.7, 222.0], [40.8, 223.0], [40.9, 223.0], [41.0, 223.0], [41.1, 223.0], [41.2, 223.0], [41.3, 223.0], [41.4, 223.0], [41.5, 223.0], [41.6, 223.0], [41.7, 223.0], [41.8, 223.0], [41.9, 223.0], [42.0, 223.0], [42.1, 223.0], [42.2, 224.0], [42.3, 224.0], [42.4, 224.0], [42.5, 224.0], [42.6, 224.0], [42.7, 224.0], [42.8, 224.0], [42.9, 224.0], [43.0, 224.0], [43.1, 224.0], [43.2, 224.0], [43.3, 224.0], [43.4, 224.0], [43.5, 224.0], [43.6, 225.0], [43.7, 225.0], [43.8, 225.0], [43.9, 225.0], [44.0, 225.0], [44.1, 225.0], [44.2, 225.0], [44.3, 225.0], [44.4, 225.0], [44.5, 225.0], [44.6, 225.0], [44.7, 225.0], [44.8, 225.0], [44.9, 226.0], [45.0, 226.0], [45.1, 226.0], [45.2, 226.0], [45.3, 226.0], [45.4, 226.0], [45.5, 226.0], [45.6, 226.0], [45.7, 226.0], [45.8, 226.0], [45.9, 226.0], [46.0, 226.0], [46.1, 227.0], [46.2, 227.0], [46.3, 227.0], [46.4, 227.0], [46.5, 227.0], [46.6, 227.0], [46.7, 227.0], [46.8, 227.0], [46.9, 227.0], [47.0, 227.0], [47.1, 227.0], [47.2, 227.0], [47.3, 228.0], [47.4, 228.0], [47.5, 228.0], [47.6, 228.0], [47.7, 228.0], [47.8, 228.0], [47.9, 228.0], [48.0, 228.0], [48.1, 228.0], [48.2, 228.0], [48.3, 228.0], [48.4, 228.0], [48.5, 229.0], [48.6, 229.0], [48.7, 229.0], [48.8, 229.0], [48.9, 229.0], [49.0, 229.0], [49.1, 229.0], [49.2, 229.0], [49.3, 229.0], [49.4, 229.0], [49.5, 229.0], [49.6, 229.0], [49.7, 230.0], [49.8, 230.0], [49.9, 230.0], [50.0, 230.0], [50.1, 230.0], [50.2, 230.0], [50.3, 230.0], [50.4, 230.0], [50.5, 230.0], [50.6, 230.0], [50.7, 230.0], [50.8, 231.0], [50.9, 231.0], [51.0, 231.0], [51.1, 231.0], [51.2, 231.0], [51.3, 231.0], [51.4, 231.0], [51.5, 231.0], [51.6, 231.0], [51.7, 231.0], [51.8, 231.0], [51.9, 232.0], [52.0, 232.0], [52.1, 232.0], [52.2, 232.0], [52.3, 232.0], [52.4, 232.0], [52.5, 232.0], [52.6, 232.0], [52.7, 232.0], [52.8, 232.0], [52.9, 233.0], [53.0, 233.0], [53.1, 233.0], [53.2, 233.0], [53.3, 233.0], [53.4, 233.0], [53.5, 233.0], [53.6, 233.0], [53.7, 233.0], [53.8, 233.0], [53.9, 234.0], [54.0, 234.0], [54.1, 234.0], [54.2, 234.0], [54.3, 234.0], [54.4, 234.0], [54.5, 234.0], [54.6, 234.0], [54.7, 234.0], [54.8, 235.0], [54.9, 235.0], [55.0, 235.0], [55.1, 235.0], [55.2, 235.0], [55.3, 235.0], [55.4, 235.0], [55.5, 235.0], [55.6, 235.0], [55.7, 236.0], [55.8, 236.0], [55.9, 236.0], [56.0, 236.0], [56.1, 236.0], [56.2, 236.0], [56.3, 236.0], [56.4, 236.0], [56.5, 236.0], [56.6, 237.0], [56.7, 237.0], [56.8, 237.0], [56.9, 237.0], [57.0, 237.0], [57.1, 237.0], [57.2, 237.0], [57.3, 237.0], [57.4, 237.0], [57.5, 238.0], [57.6, 238.0], [57.7, 238.0], [57.8, 238.0], [57.9, 238.0], [58.0, 238.0], [58.1, 238.0], [58.2, 238.0], [58.3, 238.0], [58.4, 239.0], [58.5, 239.0], [58.6, 239.0], [58.7, 239.0], [58.8, 239.0], [58.9, 239.0], [59.0, 239.0], [59.1, 240.0], [59.2, 240.0], [59.3, 240.0], [59.4, 240.0], [59.5, 240.0], [59.6, 240.0], [59.7, 240.0], [59.8, 241.0], [59.9, 241.0], [60.0, 241.0], [60.1, 241.0], [60.2, 241.0], [60.3, 241.0], [60.4, 241.0], [60.5, 241.0], [60.6, 242.0], [60.7, 242.0], [60.8, 242.0], [60.9, 242.0], [61.0, 242.0], [61.1, 242.0], [61.2, 242.0], [61.3, 243.0], [61.4, 243.0], [61.5, 243.0], [61.6, 243.0], [61.7, 243.0], [61.8, 243.0], [61.9, 244.0], [62.0, 244.0], [62.1, 244.0], [62.2, 244.0], [62.3, 244.0], [62.4, 244.0], [62.5, 244.0], [62.6, 245.0], [62.7, 245.0], [62.8, 245.0], [62.9, 245.0], [63.0, 245.0], [63.1, 246.0], [63.2, 246.0], [63.3, 246.0], [63.4, 246.0], [63.5, 246.0], [63.6, 246.0], [63.7, 246.0], [63.8, 247.0], [63.9, 247.0], [64.0, 247.0], [64.1, 247.0], [64.2, 247.0], [64.3, 247.0], [64.4, 248.0], [64.5, 248.0], [64.6, 248.0], [64.7, 248.0], [64.8, 248.0], [64.9, 249.0], [65.0, 249.0], [65.1, 249.0], [65.2, 249.0], [65.3, 249.0], [65.4, 249.0], [65.5, 250.0], [65.6, 250.0], [65.7, 250.0], [65.8, 250.0], [65.9, 250.0], [66.0, 251.0], [66.1, 251.0], [66.2, 251.0], [66.3, 251.0], [66.4, 251.0], [66.5, 252.0], [66.6, 252.0], [66.7, 252.0], [66.8, 252.0], [66.9, 252.0], [67.0, 253.0], [67.1, 253.0], [67.2, 253.0], [67.3, 253.0], [67.4, 253.0], [67.5, 254.0], [67.6, 254.0], [67.7, 254.0], [67.8, 254.0], [67.9, 255.0], [68.0, 255.0], [68.1, 255.0], [68.2, 255.0], [68.3, 256.0], [68.4, 256.0], [68.5, 256.0], [68.6, 256.0], [68.7, 256.0], [68.8, 257.0], [68.9, 257.0], [69.0, 257.0], [69.1, 257.0], [69.2, 258.0], [69.3, 258.0], [69.4, 258.0], [69.5, 259.0], [69.6, 259.0], [69.7, 259.0], [69.8, 260.0], [69.9, 260.0], [70.0, 260.0], [70.1, 260.0], [70.2, 260.0], [70.3, 261.0], [70.4, 261.0], [70.5, 261.0], [70.6, 261.0], [70.7, 262.0], [70.8, 262.0], [70.9, 263.0], [71.0, 263.0], [71.1, 263.0], [71.2, 263.0], [71.3, 264.0], [71.4, 264.0], [71.5, 264.0], [71.6, 265.0], [71.7, 265.0], [71.8, 265.0], [71.9, 266.0], [72.0, 266.0], [72.1, 266.0], [72.2, 266.0], [72.3, 267.0], [72.4, 267.0], [72.5, 267.0], [72.6, 268.0], [72.7, 268.0], [72.8, 268.0], [72.9, 269.0], [73.0, 269.0], [73.1, 270.0], [73.2, 270.0], [73.3, 270.0], [73.4, 271.0], [73.5, 271.0], [73.6, 271.0], [73.7, 272.0], [73.8, 272.0], [73.9, 272.0], [74.0, 273.0], [74.1, 273.0], [74.2, 273.0], [74.3, 274.0], [74.4, 274.0], [74.5, 275.0], [74.6, 275.0], [74.7, 275.0], [74.8, 276.0], [74.9, 276.0], [75.0, 276.0], [75.1, 277.0], [75.2, 277.0], [75.3, 278.0], [75.4, 278.0], [75.5, 279.0], [75.6, 279.0], [75.7, 279.0], [75.8, 280.0], [75.9, 280.0], [76.0, 281.0], [76.1, 281.0], [76.2, 282.0], [76.3, 282.0], [76.4, 283.0], [76.5, 283.0], [76.6, 284.0], [76.7, 284.0], [76.8, 285.0], [76.9, 285.0], [77.0, 286.0], [77.1, 286.0], [77.2, 287.0], [77.3, 288.0], [77.4, 288.0], [77.5, 289.0], [77.6, 289.0], [77.7, 290.0], [77.8, 290.0], [77.9, 291.0], [78.0, 291.0], [78.1, 292.0], [78.2, 292.0], [78.3, 293.0], [78.4, 294.0], [78.5, 294.0], [78.6, 295.0], [78.7, 296.0], [78.8, 296.0], [78.9, 297.0], [79.0, 298.0], [79.1, 299.0], [79.2, 299.0], [79.3, 300.0], [79.4, 301.0], [79.5, 301.0], [79.6, 302.0], [79.7, 302.0], [79.8, 303.0], [79.9, 304.0], [80.0, 304.0], [80.1, 305.0], [80.2, 306.0], [80.3, 307.0], [80.4, 307.0], [80.5, 308.0], [80.6, 309.0], [80.7, 310.0], [80.8, 311.0], [80.9, 312.0], [81.0, 312.0], [81.1, 313.0], [81.2, 315.0], [81.3, 316.0], [81.4, 317.0], [81.5, 318.0], [81.6, 319.0], [81.7, 320.0], [81.8, 322.0], [81.9, 323.0], [82.0, 324.0], [82.1, 325.0], [82.2, 326.0], [82.3, 328.0], [82.4, 329.0], [82.5, 330.0], [82.6, 332.0], [82.7, 334.0], [82.8, 336.0], [82.9, 338.0], [83.0, 340.0], [83.1, 342.0], [83.2, 344.0], [83.3, 347.0], [83.4, 348.0], [83.5, 351.0], [83.6, 354.0], [83.7, 357.0], [83.8, 359.0], [83.9, 361.0], [84.0, 364.0], [84.1, 367.0], [84.2, 372.0], [84.3, 376.0], [84.4, 379.0], [84.5, 384.0], [84.6, 389.0], [84.7, 395.0], [84.8, 401.0], [84.9, 408.0], [85.0, 416.0], [85.1, 424.0], [85.2, 439.0], [85.3, 452.0], [85.4, 466.0], [85.5, 478.0], [85.6, 494.0], [85.7, 506.0], [85.8, 509.0], [85.9, 511.0], [86.0, 512.0], [86.1, 512.0], [86.2, 513.0], [86.3, 514.0], [86.4, 514.0], [86.5, 515.0], [86.6, 516.0], [86.7, 516.0], [86.8, 517.0], [86.9, 518.0], [87.0, 518.0], [87.1, 519.0], [87.2, 519.0], [87.3, 520.0], [87.4, 521.0], [87.5, 522.0], [87.6, 522.0], [87.7, 523.0], [87.8, 523.0], [87.9, 524.0], [88.0, 525.0], [88.1, 526.0], [88.2, 526.0], [88.3, 527.0], [88.4, 528.0], [88.5, 528.0], [88.6, 529.0], [88.7, 530.0], [88.8, 531.0], [88.9, 532.0], [89.0, 533.0], [89.1, 534.0], [89.2, 535.0], [89.3, 536.0], [89.4, 537.0], [89.5, 539.0], [89.6, 540.0], [89.7, 541.0], [89.8, 543.0], [89.9, 544.0], [90.0, 545.0], [90.1, 548.0], [90.2, 549.0], [90.3, 551.0], [90.4, 552.0], [90.5, 554.0], [90.6, 556.0], [90.7, 558.0], [90.8, 559.0], [90.9, 561.0], [91.0, 564.0], [91.1, 568.0], [91.2, 570.0], [91.3, 573.0], [91.4, 575.0], [91.5, 579.0], [91.6, 584.0], [91.7, 588.0], [91.8, 593.0], [91.9, 598.0], [92.0, 607.0], [92.1, 617.0], [92.2, 623.0], [92.3, 634.0], [92.4, 649.0], [92.5, 660.0], [92.6, 665.0], [92.7, 667.0], [92.8, 668.0], [92.9, 669.0], [93.0, 670.0], [93.1, 671.0], [93.2, 672.0], [93.3, 673.0], [93.4, 673.0], [93.5, 674.0], [93.6, 674.0], [93.7, 675.0], [93.8, 676.0], [93.9, 676.0], [94.0, 677.0], [94.1, 677.0], [94.2, 678.0], [94.3, 679.0], [94.4, 679.0], [94.5, 680.0], [94.6, 681.0], [94.7, 681.0], [94.8, 682.0], [94.9, 682.0], [95.0, 683.0], [95.1, 684.0], [95.2, 685.0], [95.3, 685.0], [95.4, 686.0], [95.5, 687.0], [95.6, 688.0], [95.7, 689.0], [95.8, 689.0], [95.9, 690.0], [96.0, 691.0], [96.1, 692.0], [96.2, 693.0], [96.3, 693.0], [96.4, 694.0], [96.5, 695.0], [96.6, 696.0], [96.7, 697.0], [96.8, 699.0], [96.9, 700.0], [97.0, 701.0], [97.1, 703.0], [97.2, 704.0], [97.3, 705.0], [97.4, 707.0], [97.5, 709.0], [97.6, 711.0], [97.7, 713.0], [97.8, 715.0], [97.9, 716.0], [98.0, 719.0], [98.1, 722.0], [98.2, 725.0], [98.3, 728.0], [98.4, 731.0], [98.5, 734.0], [98.6, 738.0], [98.7, 742.0], [98.8, 750.0], [98.9, 754.0], [99.0, 759.0], [99.1, 765.0], [99.2, 772.0], [99.3, 780.0], [99.4, 792.0], [99.5, 809.0], [99.6, 825.0], [99.7, 856.0], [99.8, 923.0], [99.9, 1099.0], [100.0, 4674.0]], "isOverall": false, "label": "dialogues_request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 15772.0, "series": [{"data": [[600.0, 1727.0], [700.0, 522.0], [3100.0, 1.0], [800.0, 58.0], [200.0, 12277.0], [3500.0, 2.0], [900.0, 23.0], [1000.0, 8.0], [4200.0, 2.0], [4100.0, 1.0], [4600.0, 3.0], [1100.0, 3.0], [300.0, 626.0], [1200.0, 2.0], [1300.0, 3.0], [1400.0, 2.0], [1500.0, 1.0], [100.0, 3114.0], [400.0, 132.0], [1600.0, 1.0], [1700.0, 1.0], [500.0, 1524.0], [2000.0, 2.0]], "isOverall": false, "label": "bots_request", "isController": false}, {"data": [[2100.0, 1.0], [600.0, 987.0], [2400.0, 1.0], [700.0, 518.0], [3100.0, 1.0], [200.0, 15772.0], [800.0, 67.0], [900.0, 12.0], [1000.0, 13.0], [4000.0, 1.0], [4200.0, 3.0], [1100.0, 4.0], [4500.0, 1.0], [4600.0, 1.0], [300.0, 1106.0], [1200.0, 2.0], [400.0, 170.0], [100.0, 59.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [500.0, 1259.0], [2000.0, 1.0]], "isOverall": false, "label": "dialogues_request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 33269.0, "series": [{"data": [[0.0, 33269.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6721.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 27.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 91.75757575757581, "minX": 1.73121078E12, "maxY": 100.0, "series": [{"data": [[1.73121114E12, 100.0], [1.73121276E12, 100.0], [1.73121438E12, 100.0], [1.73121336E12, 100.0], [1.73121498E12, 100.0], [1.73121174E12, 100.0], [1.73121396E12, 100.0], [1.73121234E12, 100.0], [1.73121456E12, 100.0], [1.73121294E12, 100.0], [1.73121516E12, 100.0], [1.73121192E12, 100.0], [1.73121132E12, 100.0], [1.73121354E12, 100.0], [1.7312109E12, 100.0], [1.73121252E12, 100.0], [1.73121414E12, 100.0], [1.73121312E12, 100.0], [1.73121474E12, 100.0], [1.73121372E12, 100.0], [1.7312115E12, 100.0], [1.7312121E12, 100.0], [1.73121432E12, 100.0], [1.7312127E12, 100.0], [1.73121492E12, 100.0], [1.73121168E12, 100.0], [1.73121108E12, 100.0], [1.7312133E12, 100.0], [1.73121228E12, 100.0], [1.7312139E12, 100.0], [1.73121288E12, 100.0], [1.7312145E12, 100.0], [1.73121348E12, 100.0], [1.7312151E12, 100.0], [1.73121126E12, 100.0], [1.73121186E12, 100.0], [1.73121408E12, 100.0], [1.73121144E12, 100.0], [1.73121246E12, 100.0], [1.73121468E12, 100.0], [1.73121084E12, 100.0], [1.73121306E12, 100.0], [1.73121204E12, 100.0], [1.73121366E12, 100.0], [1.73121264E12, 100.0], [1.73121426E12, 100.0], [1.73121324E12, 100.0], [1.73121486E12, 100.0], [1.73121102E12, 100.0], [1.73121162E12, 100.0], [1.73121384E12, 100.0], [1.7312112E12, 100.0], [1.73121222E12, 100.0], [1.73121444E12, 100.0], [1.73121282E12, 100.0], [1.73121504E12, 100.0], [1.7312118E12, 100.0], [1.73121342E12, 100.0], [1.7312124E12, 100.0], [1.73121402E12, 100.0], [1.73121138E12, 100.0], [1.731213E12, 100.0], [1.73121462E12, 100.0], [1.73121078E12, 91.75757575757581], [1.7312136E12, 100.0], [1.73121096E12, 100.0], [1.73121198E12, 100.0], [1.7312142E12, 100.0], [1.7312148E12, 100.0], [1.73121258E12, 100.0], [1.73121156E12, 100.0], [1.73121318E12, 100.0], [1.73121216E12, 100.0], [1.73121378E12, 100.0]], "isOverall": false, "label": "100人測試", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73121516E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 194.0, "minX": 11.0, "maxY": 868.6, "series": [{"data": [[32.0, 206.0], [33.0, 208.0], [35.0, 676.0], [37.0, 665.0], [40.0, 664.0], [41.0, 662.0], [43.0, 665.0], [45.0, 672.0], [47.0, 664.0], [48.0, 194.0], [53.0, 198.0], [54.0, 436.0], [55.0, 205.0], [56.0, 661.0], [57.0, 663.0], [59.0, 674.0], [62.0, 670.0], [66.0, 697.0], [67.0, 205.0], [68.0, 683.0], [71.0, 684.0], [74.0, 221.0], [78.0, 220.0], [79.0, 868.6], [80.0, 677.0], [83.0, 691.0], [86.0, 675.6666666666666], [89.0, 670.0], [90.0, 688.0], [91.0, 699.0], [94.0, 682.0], [95.0, 680.0], [97.0, 668.0], [100.0, 303.630556668003], [11.0, 804.8], [12.0, 656.0], [13.0, 663.0], [14.0, 671.0], [16.0, 693.0], [17.0, 664.0], [27.0, 197.0], [29.0, 666.5], [30.0, 675.0]], "isOverall": false, "label": "bots_request", "isController": false}, {"data": [[99.86663339156439, 304.548939356125]], "isOverall": false, "label": "bots_request-Aggregated", "isController": false}, {"data": [[34.0, 212.5], [36.0, 213.0], [63.0, 229.0], [66.0, 226.0], [67.0, 232.0], [70.0, 205.0], [72.0, 238.0], [73.0, 283.0], [75.0, 211.0], [79.0, 318.0], [83.0, 232.0], [85.0, 207.0], [86.0, 256.0], [89.0, 225.0], [91.0, 252.0], [95.0, 216.0], [97.0, 204.0], [100.0, 295.74057927440657], [14.0, 214.0], [15.0, 226.0], [16.0, 231.0], [21.0, 211.0], [24.0, 245.0], [25.0, 226.0], [30.0, 204.0]], "isOverall": false, "label": "dialogues_request", "isController": false}, {"data": [[99.94314883395096, 295.65473926533946]], "isOverall": false, "label": "dialogues_request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 458.23333333333335, "minX": 1.73121078E12, "maxY": 21543.55, "series": [{"data": [[1.73121114E12, 20458.333333333332], [1.73121276E12, 19150.5], [1.73121438E12, 19710.55], [1.73121336E12, 19037.716666666667], [1.73121498E12, 20446.333333333332], [1.73121174E12, 19938.15], [1.73121396E12, 21433.716666666667], [1.73121234E12, 18671.3], [1.73121456E12, 18782.05], [1.73121294E12, 19801.366666666665], [1.73121516E12, 2285.25], [1.73121192E12, 18781.133333333335], [1.73121132E12, 19965.1], [1.73121354E12, 19407.083333333332], [1.7312109E12, 19788.45], [1.73121252E12, 18552.416666666668], [1.73121414E12, 18104.233333333334], [1.73121312E12, 19957.166666666668], [1.73121474E12, 18935.816666666666], [1.73121372E12, 19610.683333333334], [1.7312115E12, 20407.383333333335], [1.7312121E12, 18991.75], [1.73121432E12, 18715.233333333334], [1.7312127E12, 19522.816666666666], [1.73121492E12, 18468.616666666665], [1.73121168E12, 18920.866666666665], [1.73121108E12, 18706.183333333334], [1.7312133E12, 19319.216666666667], [1.73121228E12, 19752.45], [1.7312139E12, 19521.9], [1.73121288E12, 19536.85], [1.7312145E12, 18861.983333333334], [1.73121348E12, 19725.5], [1.7312151E12, 19480.916666666668], [1.73121126E12, 20140.833333333332], [1.73121186E12, 20502.266666666666], [1.73121408E12, 20196.766666666666], [1.73121144E12, 17468.316666666666], [1.73121246E12, 20512.233333333334], [1.73121468E12, 20697.933333333334], [1.73121084E12, 19151.416666666668], [1.73121306E12, 19570.816666666666], [1.73121204E12, 18606.316666666666], [1.73121366E12, 19950.15], [1.73121264E12, 19444.0], [1.73121426E12, 18874.9], [1.73121324E12, 19615.666666666668], [1.73121486E12, 20028.05], [1.73121102E12, 19082.566666666666], [1.73121162E12, 18781.133333333335], [1.73121384E12, 20878.65], [1.7312112E12, 19365.183333333334], [1.73121222E12, 20773.8], [1.73121444E12, 17779.716666666667], [1.73121282E12, 19925.233333333334], [1.73121504E12, 20201.75], [1.7312118E12, 19683.6], [1.73121342E12, 19415.016666666666], [1.7312124E12, 19548.85], [1.73121402E12, 17674.866666666665], [1.73121138E12, 19835.333333333332], [1.731213E12, 19541.833333333332], [1.73121462E12, 17700.9], [1.73121078E12, 16940.0], [1.7312136E12, 19472.983333333334], [1.73121096E12, 19201.45], [1.73121198E12, 21543.55], [1.7312142E12, 19634.683333333334], [1.7312148E12, 19241.316666666666], [1.73121258E12, 18284.95], [1.73121156E12, 19283.216666666667], [1.73121318E12, 20321.55], [1.73121216E12, 18153.15], [1.73121378E12, 19209.383333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73121114E12, 3998.7], [1.73121276E12, 3758.7833333333333], [1.73121438E12, 3837.45], [1.73121336E12, 3770.4666666666667], [1.73121498E12, 3974.9166666666665], [1.73121174E12, 3854.3], [1.73121396E12, 4176.8], [1.73121234E12, 3677.516666666667], [1.73121456E12, 3625.616666666667], [1.73121294E12, 3818.4166666666665], [1.73121516E12, 458.23333333333335], [1.73121192E12, 3714.266666666667], [1.73121132E12, 3853.4333333333334], [1.73121354E12, 3814.983333333333], [1.7312109E12, 3883.2833333333333], [1.73121252E12, 3568.55], [1.73121414E12, 3566.85], [1.73121312E12, 3910.0833333333335], [1.73121474E12, 3677.0666666666666], [1.73121372E12, 3784.266666666667], [1.7312115E12, 3952.0], [1.7312121E12, 3715.55], [1.73121432E12, 3692.2166666666667], [1.7312127E12, 3754.866666666667], [1.73121492E12, 3619.5833333333335], [1.73121168E12, 3701.7166666666667], [1.73121108E12, 3620.0], [1.7312133E12, 3785.5833333333335], [1.73121228E12, 3811.9333333333334], [1.7312139E12, 3843.516666666667], [1.73121288E12, 3818.866666666667], [1.7312145E12, 3711.6666666666665], [1.73121348E12, 3812.8], [1.7312151E12, 3780.383333333333], [1.73121126E12, 3912.233333333333], [1.73121186E12, 4013.4], [1.73121408E12, 3950.7166666666667], [1.73121144E12, 3482.5666666666666], [1.73121246E12, 3996.9666666666667], [1.73121468E12, 4039.3333333333335], [1.73121084E12, 3670.133333333333], [1.73121306E12, 3850.0], [1.73121204E12, 3566.8166666666666], [1.73121366E12, 3878.0833333333335], [1.73121264E12, 3797.6833333333334], [1.73121426E12, 3646.8], [1.73121324E12, 3776.05], [1.73121486E12, 3923.9166666666665], [1.73121102E12, 3696.516666666667], [1.73121162E12, 3714.266666666667], [1.73121384E12, 4089.9166666666665], [1.7312112E12, 3840.5], [1.73121222E12, 4044.95], [1.73121444E12, 3448.383333333333], [1.73121282E12, 3919.1666666666665], [1.73121504E12, 3942.5], [1.7312118E12, 3838.3166666666666], [1.73121342E12, 3758.3333333333335], [1.7312124E12, 3842.65], [1.73121402E12, 3403.4166666666665], [1.73121138E12, 3849.55], [1.731213E12, 3810.65], [1.73121462E12, 3491.2], [1.73121078E12, 3177.3], [1.7312136E12, 3837.0333333333333], [1.73121096E12, 3805.483333333333], [1.73121198E12, 4213.55], [1.7312142E12, 3831.8333333333335], [1.7312148E12, 3739.75], [1.73121258E12, 3617.4333333333334], [1.73121156E12, 3714.233333333333], [1.73121318E12, 3962.8166666666666], [1.73121216E12, 3573.3333333333335], [1.73121378E12, 3748.8333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73121516E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 221.0, "minX": 1.73121078E12, "maxY": 408.9444444444446, "series": [{"data": [[1.73121114E12, 291.89236111111126], [1.73121276E12, 275.9701492537313], [1.73121438E12, 282.3906810035841], [1.73121336E12, 268.43726235741434], [1.73121498E12, 288.2551724137933], [1.73121174E12, 302.5157894736842], [1.73121396E12, 287.075907590759], [1.73121234E12, 283.55769230769243], [1.73121456E12, 296.74349442379173], [1.73121294E12, 306.6338028169017], [1.73121516E12, 221.0], [1.73121192E12, 335.38846153846157], [1.73121132E12, 321.020979020979], [1.73121354E12, 289.0590405904061], [1.7312109E12, 337.3682310469314], [1.73121252E12, 268.74906367041217], [1.73121414E12, 291.97619047619037], [1.73121312E12, 281.38214285714304], [1.73121474E12, 276.0297397769515], [1.73121372E12, 313.3879003558719], [1.7312115E12, 304.6975945017183], [1.7312121E12, 280.29588014981283], [1.73121432E12, 284.22692307692313], [1.7312127E12, 301.94661921708183], [1.73121492E12, 304.3513513513512], [1.73121168E12, 353.19548872180474], [1.73121108E12, 311.8614232209738], [1.7312133E12, 261.06273062730634], [1.73121228E12, 321.9964664310955], [1.7312139E12, 316.5698529411763], [1.73121288E12, 315.58909090909094], [1.7312145E12, 332.00760456273747], [1.73121348E12, 305.6063829787232], [1.7312151E12, 298.5090252707582], [1.73121126E12, 314.6083916083916], [1.73121186E12, 293.96527777777766], [1.73121408E12, 289.9718309859157], [1.73121144E12, 352.01255230125525], [1.73121246E12, 307.0068965517242], [1.73121468E12, 289.1335616438356], [1.73121084E12, 333.77256317689535], [1.73121306E12, 316.61904761904765], [1.73121204E12, 295.5836431226766], [1.73121366E12, 315.90106007067186], [1.73121264E12, 279.6459854014597], [1.73121426E12, 282.4111111111109], [1.73121324E12, 299.6808510638297], [1.73121486E12, 297.2846975088969], [1.73121102E12, 338.9705882352942], [1.73121162E12, 366.46153846153834], [1.73121384E12, 309.11945392491464], [1.7312112E12, 308.4382022471909], [1.73121222E12, 282.2312925170069], [1.73121444E12, 308.53359683794463], [1.73121282E12, 300.67985611510795], [1.73121504E12, 291.8631578947368], [1.7312118E12, 322.73381294964037], [1.73121342E12, 281.12635379061356], [1.7312124E12, 320.92307692307696], [1.73121402E12, 296.32283464566916], [1.73121138E12, 351.7340425531915], [1.731213E12, 281.3043478260868], [1.73121462E12, 271.4756097560976], [1.73121078E12, 408.9444444444446], [1.7312136E12, 325.7896678966791], [1.73121096E12, 347.7471698113209], [1.73121198E12, 349.0726072607259], [1.7312142E12, 277.1624548736461], [1.7312148E12, 297.4102564102564], [1.73121258E12, 252.0909090909092], [1.73121156E12, 343.97111913357423], [1.73121318E12, 286.12543554006965], [1.73121216E12, 290.5177865612647], [1.73121378E12, 280.28044280442793]], "isOverall": false, "label": "bots_request", "isController": false}, {"data": [[1.73121114E12, 269.6275862068964], [1.73121276E12, 280.4327272727273], [1.73121438E12, 288.5471014492753], [1.73121336E12, 273.4839857651247], [1.73121498E12, 310.263157894737], [1.73121174E12, 282.5054945054948], [1.73121396E12, 291.7774086378734], [1.73121234E12, 292.0442804428044], [1.73121456E12, 294.23046874999994], [1.73121294E12, 311.2565055762082], [1.73121516E12, 230.45714285714286], [1.73121192E12, 292.12681159420305], [1.73121132E12, 274.61397058823525], [1.73121354E12, 284.6928571428571], [1.7312109E12, 294.3063380281693], [1.73121252E12, 276.6799999999999], [1.73121414E12, 283.89733840304183], [1.73121312E12, 287.4245614035086], [1.73121474E12, 272.091254752852], [1.73121372E12, 333.82771535580514], [1.7312115E12, 281.3309608540925], [1.7312121E12, 292.8740740740741], [1.73121432E12, 292.5054945054945], [1.7312127E12, 298.2167300380226], [1.73121492E12, 316.4848484848485], [1.73121168E12, 292.6617100371747], [1.73121108E12, 289.2490272373542], [1.7312133E12, 283.4601449275361], [1.73121228E12, 322.0408921933086], [1.7312139E12, 315.98586572438177], [1.73121288E12, 320.6642599277978], [1.7312145E12, 311.168498168498], [1.73121348E12, 304.862962962963], [1.7312151E12, 298.6888888888889], [1.73121126E12, 283.7857142857143], [1.73121186E12, 278.4554794520547], [1.73121408E12, 300.6062717770034], [1.73121144E12, 288.2509505703423], [1.73121246E12, 305.2916666666668], [1.73121468E12, 292.5650684931506], [1.73121084E12, 289.5921568627451], [1.73121306E12, 316.1943462897527], [1.73121204E12, 307.7459677419354], [1.73121366E12, 324.4928057553956], [1.73121264E12, 289.35636363636365], [1.73121426E12, 287.8914728682171], [1.73121324E12, 276.78113207547153], [1.73121486E12, 301.44405594405606], [1.73121102E12, 283.69201520912566], [1.73121162E12, 315.09782608695633], [1.73121384E12, 304.55704697986585], [1.7312112E12, 289.8397212543555], [1.73121222E12, 291.71821305841905], [1.73121444E12, 319.6869918699185], [1.73121282E12, 312.74652777777766], [1.73121504E12, 294.7052631578944], [1.7312118E12, 310.2454873646207], [1.73121342E12, 289.0224719101127], [1.7312124E12, 339.1382978723406], [1.73121402E12, 284.0334728033473], [1.73121138E12, 290.29454545454536], [1.731213E12, 291.6109090909089], [1.73121462E12, 305.31007751937994], [1.73121078E12, 231.99523809523816], [1.7312136E12, 315.77031802120155], [1.73121096E12, 288.9542253521125], [1.73121198E12, 306.21241830065367], [1.7312142E12, 288.7003610108305], [1.7312148E12, 307.92910447761165], [1.73121258E12, 276.92936802974], [1.73121156E12, 293.85823754789277], [1.73121318E12, 287.8881118881118], [1.73121216E12, 306.48288973384], [1.73121378E12, 290.5645756457564]], "isOverall": false, "label": "dialogues_request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73121516E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 221.0, "minX": 1.73121078E12, "maxY": 408.797619047619, "series": [{"data": [[1.73121114E12, 291.857638888889], [1.73121276E12, 275.95522388059715], [1.73121438E12, 282.37634408602133], [1.73121336E12, 268.4068441064639], [1.73121498E12, 288.25172413793086], [1.73121174E12, 302.5052631578949], [1.73121396E12, 287.06930693069313], [1.73121234E12, 283.5538461538461], [1.73121456E12, 296.717472118959], [1.73121294E12, 306.61619718309873], [1.73121516E12, 221.0], [1.73121192E12, 335.3692307692309], [1.73121132E12, 321.0034965034967], [1.73121354E12, 289.04428044280445], [1.7312109E12, 337.3249097472924], [1.73121252E12, 268.73033707865176], [1.73121414E12, 291.9444444444443], [1.73121312E12, 281.36785714285713], [1.73121474E12, 276.0074349442379], [1.73121372E12, 313.3772241992885], [1.7312115E12, 304.6804123711338], [1.7312121E12, 280.28464419475665], [1.73121432E12, 284.19999999999976], [1.7312127E12, 301.91459074733115], [1.73121492E12, 304.3397683397682], [1.73121168E12, 353.17669172932335], [1.73121108E12, 311.8426966292136], [1.7312133E12, 261.03690036900366], [1.73121228E12, 321.9717314487632], [1.7312139E12, 316.55514705882365], [1.73121288E12, 315.5709090909091], [1.7312145E12, 331.99619771863115], [1.73121348E12, 305.58156028368796], [1.7312151E12, 298.4837545126354], [1.73121126E12, 314.58391608391605], [1.73121186E12, 293.9444444444445], [1.73121408E12, 289.9471830985912], [1.73121144E12, 351.9916317991632], [1.73121246E12, 306.9724137931033], [1.73121468E12, 289.11643835616445], [1.73121084E12, 333.72563176895284], [1.73121306E12, 316.6080586080586], [1.73121204E12, 295.55762081784377], [1.73121366E12, 315.8904593639579], [1.73121264E12, 279.6313868613139], [1.73121426E12, 282.3999999999999], [1.73121324E12, 299.6666666666666], [1.73121486E12, 297.27046263345204], [1.73121102E12, 338.9522058823527], [1.73121162E12, 366.4346153846154], [1.73121384E12, 309.0921501706485], [1.7312112E12, 308.40449438202234], [1.73121222E12, 282.2108843537412], [1.73121444E12, 308.52173913043487], [1.73121282E12, 300.67985611510795], [1.73121504E12, 291.8526315789475], [1.7312118E12, 322.7158273381295], [1.73121342E12, 281.10108303249086], [1.7312124E12, 320.9084249084247], [1.73121402E12, 296.3110236220473], [1.73121138E12, 351.7127659574468], [1.731213E12, 281.2934782608697], [1.73121462E12, 271.4634146341463], [1.73121078E12, 408.797619047619], [1.7312136E12, 325.7601476014759], [1.73121096E12, 347.71698113207543], [1.73121198E12, 349.05610561056125], [1.7312142E12, 277.15162454873627], [1.7312148E12, 297.38827838827854], [1.73121258E12, 252.07905138339933], [1.73121156E12, 343.95667870036124], [1.73121318E12, 286.1114982578397], [1.73121216E12, 290.4980237154148], [1.73121378E12, 280.2656826568267]], "isOverall": false, "label": "bots_request", "isController": false}, {"data": [[1.73121114E12, 269.5931034482758], [1.73121276E12, 280.4145454545454], [1.73121438E12, 288.5326086956523], [1.73121336E12, 273.4661921708187], [1.73121498E12, 310.25263157894767], [1.73121174E12, 282.4981684981688], [1.73121396E12, 291.7574750830565], [1.73121234E12, 292.0295202952028], [1.73121456E12, 294.22656249999994], [1.73121294E12, 311.2342007434943], [1.73121516E12, 230.42857142857147], [1.73121192E12, 292.1050724637681], [1.73121132E12, 274.59558823529403], [1.73121354E12, 284.68571428571414], [1.7312109E12, 294.23591549295753], [1.73121252E12, 276.65999999999997], [1.73121414E12, 283.87832699619776], [1.73121312E12, 287.4105263157897], [1.73121474E12, 272.0646387832697], [1.73121372E12, 333.81273408239696], [1.7312115E12, 281.32384341637004], [1.7312121E12, 292.8666666666667], [1.73121432E12, 292.4981684981687], [1.7312127E12, 298.2015209125475], [1.73121492E12, 316.47348484848493], [1.73121168E12, 292.631970260223], [1.73121108E12, 289.2178988326849], [1.7312133E12, 283.45289855072457], [1.73121228E12, 322.0074349442377], [1.7312139E12, 315.96819787985856], [1.73121288E12, 320.64259927797826], [1.7312145E12, 311.1575091575092], [1.73121348E12, 304.84074074074067], [1.7312151E12, 298.6888888888889], [1.73121126E12, 283.7464285714287], [1.73121186E12, 278.4417808219177], [1.73121408E12, 300.59233449477347], [1.73121144E12, 288.23574144486696], [1.73121246E12, 305.26736111111103], [1.73121468E12, 292.5410958904113], [1.73121084E12, 289.5529411764704], [1.73121306E12, 316.18374558303873], [1.73121204E12, 307.73387096774184], [1.73121366E12, 324.48920863309337], [1.73121264E12, 289.3490909090908], [1.73121426E12, 287.8720930232556], [1.73121324E12, 276.76981132075474], [1.73121486E12, 301.4230769230767], [1.73121102E12, 283.6730038022813], [1.73121162E12, 315.090579710145], [1.73121384E12, 304.5402684563757], [1.7312112E12, 289.808362369338], [1.73121222E12, 291.70790378006865], [1.73121444E12, 319.66260162601594], [1.73121282E12, 312.7361111111114], [1.73121504E12, 294.69122807017567], [1.7312118E12, 310.23465703971124], [1.73121342E12, 289.01123595505624], [1.7312124E12, 339.12411347517696], [1.73121402E12, 284.01673640167354], [1.73121138E12, 290.276363636364], [1.731213E12, 291.60363636363667], [1.73121462E12, 305.30232558139545], [1.73121078E12, 231.91428571428568], [1.7312136E12, 315.7561837455831], [1.73121096E12, 288.91197183098586], [1.73121198E12, 306.1960784313723], [1.7312142E12, 288.696750902527], [1.7312148E12, 307.9216417910448], [1.73121258E12, 276.90706319702605], [1.73121156E12, 293.8429118773946], [1.73121318E12, 287.87762237762234], [1.73121216E12, 306.4638783269963], [1.73121378E12, 290.54612546125435]], "isOverall": false, "label": "dialogues_request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73121516E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73121078E12, "maxY": 189.95634920634916, "series": [{"data": [[1.73121114E12, 72.93055555555561], [1.73121276E12, 59.77985074626866], [1.73121438E12, 60.28673835125451], [1.73121336E12, 47.634980988593135], [1.73121498E12, 63.24482758620692], [1.73121174E12, 74.24912280701756], [1.73121396E12, 56.18151815181519], [1.73121234E12, 63.15384615384616], [1.73121456E12, 72.67657992565054], [1.73121294E12, 89.34507042253523], [1.73121516E12, 0.0], [1.73121192E12, 88.28076923076924], [1.73121132E12, 100.55244755244757], [1.73121354E12, 59.107011070110694], [1.7312109E12, 116.31046931407933], [1.73121252E12, 46.44943820224719], [1.73121414E12, 56.218253968253926], [1.73121312E12, 60.50357142857144], [1.73121474E12, 53.40892193308553], [1.73121372E12, 90.97864768683274], [1.7312115E12, 72.45360824742268], [1.7312121E12, 59.62921348314609], [1.73121432E12, 65.44230769230766], [1.7312127E12, 79.05693950177945], [1.73121492E12, 79.65250965250964], [1.73121168E12, 118.26315789473684], [1.73121108E12, 96.85767790262172], [1.7312133E12, 36.04428044280444], [1.73121228E12, 87.12367491166076], [1.7312139E12, 93.40441176470584], [1.73121288E12, 91.74909090909097], [1.7312145E12, 96.37262357414448], [1.73121348E12, 83.30141843971627], [1.7312151E12, 71.80505415162465], [1.73121126E12, 91.15384615384623], [1.73121186E12, 67.24652777777777], [1.73121408E12, 64.90140845070421], [1.73121144E12, 133.4393305439332], [1.73121246E12, 83.38275862068967], [1.73121468E12, 67.93493150684934], [1.73121084E12, 115.1010830324909], [1.73121306E12, 91.85714285714293], [1.73121204E12, 76.56505576208171], [1.73121366E12, 90.05653710247351], [1.73121264E12, 56.60218978102189], [1.73121426E12, 60.68888888888895], [1.73121324E12, 79.88652482269502], [1.73121486E12, 69.07473309608545], [1.73121102E12, 118.59558823529413], [1.73121162E12, 127.84615384615385], [1.73121384E12, 82.78498293515354], [1.7312112E12, 62.797752808988726], [1.73121222E12, 56.14965986394556], [1.73121444E12, 94.89328063241103], [1.73121282E12, 70.76618705035982], [1.73121504E12, 65.32631578947375], [1.7312118E12, 97.47122302158274], [1.73121342E12, 53.155234657039706], [1.7312124E12, 96.83150183150178], [1.73121402E12, 82.1889763779527], [1.73121138E12, 112.4007092198582], [1.731213E12, 60.775362318840564], [1.73121462E12, 54.426829268292686], [1.73121078E12, 189.95634920634916], [1.7312136E12, 92.49815498154973], [1.73121096E12, 120.80377358490558], [1.73121198E12, 104.29702970297038], [1.7312142E12, 51.65703971119133], [1.7312148E12, 64.17948717948721], [1.73121258E12, 33.05138339920947], [1.73121156E12, 115.17689530685922], [1.73121318E12, 58.731707317073166], [1.73121216E12, 66.55335968379447], [1.73121378E12, 65.63837638376386]], "isOverall": false, "label": "bots_request", "isController": false}, {"data": [[1.73121114E12, 30.18620689655172], [1.73121276E12, 49.53818181818183], [1.73121438E12, 53.35144927536229], [1.73121336E12, 40.38790035587189], [1.73121498E12, 56.31578947368419], [1.73121174E12, 39.32967032967031], [1.73121396E12, 48.617940199335536], [1.73121234E12, 53.84870848708488], [1.73121456E12, 54.7578125], [1.73121294E12, 79.81784386617102], [1.73121516E12, 0.0], [1.73121192E12, 36.86231884057971], [1.73121132E12, 39.94485294117642], [1.73121354E12, 45.16785714285713], [1.7312109E12, 53.3556338028169], [1.73121252E12, 34.764], [1.73121414E12, 51.46768060836498], [1.73121312E12, 50.36140350877194], [1.73121474E12, 41.04562737642586], [1.73121372E12, 81.3782771535581], [1.7312115E12, 35.24911032028465], [1.7312121E12, 53.981481481481474], [1.73121432E12, 60.578754578754584], [1.7312127E12, 65.01140684410645], [1.73121492E12, 75.38257575757572], [1.73121168E12, 57.843866171003704], [1.73121108E12, 59.03112840466925], [1.7312133E12, 39.112318840579704], [1.73121228E12, 77.20817843866168], [1.7312139E12, 76.30035335689047], [1.73121288E12, 75.94223826714797], [1.7312145E12, 79.67765567765571], [1.73121348E12, 68.72592592592589], [1.7312151E12, 61.15555555555553], [1.73121126E12, 43.38214285714288], [1.73121186E12, 34.999999999999986], [1.73121408E12, 58.7282229965157], [1.73121144E12, 57.239543726235794], [1.73121246E12, 70.19444444444444], [1.73121468E12, 55.28767123287672], [1.73121084E12, 59.27843137254906], [1.73121306E12, 76.43109540636036], [1.73121204E12, 69.95564516129025], [1.73121366E12, 74.32733812949647], [1.73121264E12, 55.778181818181864], [1.73121426E12, 50.844961240310084], [1.73121324E12, 42.852830188679235], [1.73121486E12, 55.234265734265755], [1.73121102E12, 57.55513307984792], [1.73121162E12, 58.31884057971017], [1.73121384E12, 64.93624161073828], [1.7312112E12, 35.41811846689896], [1.73121222E12, 54.36082474226802], [1.73121444E12, 81.26829268292693], [1.73121282E12, 67.72222222222227], [1.73121504E12, 55.807017543859594], [1.7312118E12, 56.173285198555945], [1.73121342E12, 54.77528089887641], [1.7312124E12, 100.90425531914893], [1.73121402E12, 56.65690376569037], [1.73121138E12, 53.618181818181846], [1.731213E12, 51.6218181818182], [1.73121462E12, 75.74418604651162], [1.73121078E12, 0.0], [1.7312136E12, 73.0282685512367], [1.73121096E12, 52.820422535211264], [1.73121198E12, 47.535947712418256], [1.7312142E12, 49.15884476534293], [1.7312148E12, 45.82089552238808], [1.73121258E12, 42.706319702602215], [1.73121156E12, 57.68965517241381], [1.73121318E12, 49.7062937062937], [1.73121216E12, 60.48669201520911], [1.73121378E12, 61.088560885608864]], "isOverall": false, "label": "dialogues_request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73121516E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 190.0, "minX": 1.73121078E12, "maxY": 4681.0, "series": [{"data": [[1.73121114E12, 854.0], [1.73121276E12, 817.0], [1.73121438E12, 772.0], [1.73121336E12, 714.0], [1.73121498E12, 4258.0], [1.73121174E12, 1051.0], [1.73121396E12, 687.0], [1.73121234E12, 625.0], [1.73121456E12, 752.0], [1.73121294E12, 780.0], [1.73121516E12, 400.0], [1.73121192E12, 4223.0], [1.73121132E12, 814.0], [1.73121354E12, 741.0], [1.7312109E12, 1128.0], [1.73121252E12, 577.0], [1.73121414E12, 4681.0], [1.73121312E12, 704.0], [1.73121474E12, 830.0], [1.73121372E12, 4674.0], [1.7312115E12, 712.0], [1.7312121E12, 759.0], [1.73121432E12, 856.0], [1.7312127E12, 747.0], [1.73121492E12, 895.0], [1.73121168E12, 4666.0], [1.73121108E12, 852.0], [1.7312133E12, 815.0], [1.73121228E12, 1089.0], [1.7312139E12, 884.0], [1.73121288E12, 1096.0], [1.7312145E12, 4678.0], [1.73121348E12, 846.0], [1.7312151E12, 776.0], [1.73121126E12, 894.0], [1.73121186E12, 752.0], [1.73121408E12, 837.0], [1.73121144E12, 803.0], [1.73121246E12, 855.0], [1.73121468E12, 833.0], [1.73121084E12, 800.0], [1.73121306E12, 843.0], [1.73121204E12, 840.0], [1.73121366E12, 4207.0], [1.73121264E12, 744.0], [1.73121426E12, 747.0], [1.73121324E12, 1725.0], [1.73121486E12, 813.0], [1.73121102E12, 832.0], [1.73121162E12, 1329.0], [1.73121384E12, 900.0], [1.7312112E12, 929.0], [1.73121222E12, 820.0], [1.73121444E12, 971.0], [1.73121282E12, 4058.0], [1.73121504E12, 771.0], [1.7312118E12, 4235.0], [1.73121342E12, 799.0], [1.7312124E12, 4548.0], [1.73121402E12, 814.0], [1.73121138E12, 4209.0], [1.731213E12, 662.0], [1.73121462E12, 871.0], [1.73121078E12, 936.0], [1.7312136E12, 1143.0], [1.73121096E12, 809.0], [1.73121198E12, 1401.0], [1.7312142E12, 804.0], [1.7312148E12, 920.0], [1.73121258E12, 736.0], [1.73121156E12, 807.0], [1.73121318E12, 705.0], [1.73121216E12, 966.0], [1.73121378E12, 737.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73121114E12, 190.0], [1.73121276E12, 191.0], [1.73121438E12, 191.0], [1.73121336E12, 191.0], [1.73121498E12, 193.0], [1.73121174E12, 192.0], [1.73121396E12, 192.0], [1.73121234E12, 191.0], [1.73121456E12, 194.0], [1.73121294E12, 191.0], [1.73121516E12, 197.0], [1.73121192E12, 191.0], [1.73121132E12, 191.0], [1.73121354E12, 193.0], [1.7312109E12, 190.0], [1.73121252E12, 193.0], [1.73121414E12, 191.0], [1.73121312E12, 192.0], [1.73121474E12, 190.0], [1.73121372E12, 191.0], [1.7312115E12, 191.0], [1.7312121E12, 190.0], [1.73121432E12, 191.0], [1.7312127E12, 191.0], [1.73121492E12, 191.0], [1.73121168E12, 191.0], [1.73121108E12, 191.0], [1.7312133E12, 190.0], [1.73121228E12, 192.0], [1.7312139E12, 192.0], [1.73121288E12, 191.0], [1.7312145E12, 191.0], [1.73121348E12, 190.0], [1.7312151E12, 190.0], [1.73121126E12, 192.0], [1.73121186E12, 191.0], [1.73121408E12, 191.0], [1.73121144E12, 191.0], [1.73121246E12, 192.0], [1.73121468E12, 192.0], [1.73121084E12, 191.0], [1.73121306E12, 191.0], [1.73121204E12, 190.0], [1.73121366E12, 191.0], [1.73121264E12, 193.0], [1.73121426E12, 192.0], [1.73121324E12, 191.0], [1.73121486E12, 193.0], [1.73121102E12, 192.0], [1.73121162E12, 191.0], [1.73121384E12, 193.0], [1.7312112E12, 190.0], [1.73121222E12, 193.0], [1.73121444E12, 190.0], [1.73121282E12, 192.0], [1.73121504E12, 191.0], [1.7312118E12, 190.0], [1.73121342E12, 193.0], [1.7312124E12, 192.0], [1.73121402E12, 192.0], [1.73121138E12, 191.0], [1.731213E12, 192.0], [1.73121462E12, 191.0], [1.73121078E12, 191.0], [1.7312136E12, 190.0], [1.73121096E12, 192.0], [1.73121198E12, 192.0], [1.7312142E12, 193.0], [1.7312148E12, 191.0], [1.73121258E12, 192.0], [1.73121156E12, 193.0], [1.73121318E12, 191.0], [1.73121216E12, 192.0], [1.73121378E12, 191.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73121114E12, 521.0], [1.73121276E12, 521.0], [1.73121438E12, 525.0], [1.73121336E12, 517.0], [1.73121498E12, 551.4], [1.73121174E12, 524.0], [1.73121396E12, 526.0], [1.73121234E12, 530.0], [1.73121456E12, 563.4000000000002], [1.73121294E12, 677.0], [1.73121516E12, 269.3], [1.73121192E12, 500.50000000000006], [1.73121132E12, 675.0], [1.73121354E12, 522.0], [1.7312109E12, 679.8], [1.73121252E12, 513.2], [1.73121414E12, 531.0000000000003], [1.73121312E12, 520.0], [1.73121474E12, 519.7], [1.73121372E12, 684.0], [1.7312115E12, 521.0], [1.7312121E12, 531.2], [1.73121432E12, 529.0], [1.7312127E12, 670.0], [1.73121492E12, 669.0], [1.73121168E12, 689.4000000000001], [1.73121108E12, 677.0], [1.7312133E12, 508.0], [1.73121228E12, 678.0], [1.7312139E12, 684.4000000000001], [1.73121288E12, 684.7], [1.7312145E12, 682.0], [1.73121348E12, 672.0], [1.7312151E12, 568.4], [1.73121126E12, 678.0], [1.73121186E12, 518.0], [1.73121408E12, 672.6000000000001], [1.73121144E12, 689.0], [1.73121246E12, 676.1], [1.73121468E12, 541.5], [1.73121084E12, 678.0], [1.73121306E12, 690.0], [1.73121204E12, 677.2], [1.73121366E12, 675.8], [1.73121264E12, 528.0], [1.73121426E12, 523.1], [1.73121324E12, 524.0], [1.73121486E12, 552.0], [1.73121102E12, 682.0], [1.73121162E12, 685.3], [1.73121384E12, 673.8000000000001], [1.7312112E12, 640.5], [1.73121222E12, 526.4], [1.73121444E12, 674.0], [1.73121282E12, 528.0], [1.73121504E12, 524.0], [1.7312118E12, 680.2], [1.73121342E12, 523.0], [1.7312124E12, 677.0], [1.73121402E12, 674.6], [1.73121138E12, 682.0], [1.731213E12, 525.6], [1.73121462E12, 575.0], [1.73121078E12, 675.7], [1.7312136E12, 675.5], [1.73121096E12, 684.0], [1.73121198E12, 682.0], [1.7312142E12, 526.5], [1.7312148E12, 575.2], [1.73121258E12, 515.0], [1.73121156E12, 691.0], [1.73121318E12, 525.0], [1.73121216E12, 533.3], [1.73121378E12, 526.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73121114E12, 677.5700000000006], [1.73121276E12, 658.4799999999968], [1.73121438E12, 659.6399999999996], [1.73121336E12, 630.6499999999999], [1.73121498E12, 709.0800000000002], [1.73121174E12, 658.2799999999997], [1.73121396E12, 600.8500000000001], [1.73121234E12, 598.3599999999999], [1.73121456E12, 724.6600000000001], [1.73121294E12, 742.46], [1.73121516E12, 400.0], [1.73121192E12, 2320.459999999999], [1.73121132E12, 750.41], [1.73121354E12, 642.7200000000003], [1.7312109E12, 948.0799999999995], [1.73121252E12, 564.4600000000002], [1.73121414E12, 747.52], [1.73121312E12, 597.34], [1.73121474E12, 701.6999999999996], [1.73121372E12, 808.8299999999997], [1.7312115E12, 646.2399999999998], [1.7312121E12, 687.0], [1.73121432E12, 772.4799999999991], [1.7312127E12, 723.55], [1.73121492E12, 779.3599999999999], [1.73121168E12, 809.8399999999999], [1.73121108E12, 727.75], [1.7312133E12, 688.2799999999997], [1.73121228E12, 911.6000000000022], [1.7312139E12, 786.3999999999994], [1.73121288E12, 810.1100000000004], [1.7312145E12, 791.9699999999999], [1.73121348E12, 772.8800000000001], [1.7312151E12, 723.1999999999998], [1.73121126E12, 825.6300000000005], [1.73121186E12, 692.1899999999999], [1.73121408E12, 795.3999999999999], [1.73121144E12, 748.97], [1.73121246E12, 773.3100000000004], [1.73121468E12, 740.4499999999999], [1.73121084E12, 720.67], [1.73121306E12, 808.2899999999998], [1.73121204E12, 768.82], [1.73121366E12, 779.42], [1.73121264E12, 718.5], [1.73121426E12, 669.5500000000002], [1.73121324E12, 1002.6799999999998], [1.73121486E12, 742.8400000000006], [1.73121102E12, 765.0], [1.73121162E12, 1091.4099999999999], [1.73121384E12, 779.4000000000002], [1.7312112E12, 790.5000000000014], [1.73121222E12, 719.3599999999997], [1.73121444E12, 742.0], [1.73121282E12, 999.6600000000001], [1.73121504E12, 736.8699999999999], [1.7312118E12, 747.7599999999998], [1.73121342E12, 742.0], [1.7312124E12, 1212.599999999943], [1.73121402E12, 727.3], [1.73121138E12, 777.0], [1.731213E12, 607.44], [1.73121462E12, 808.8], [1.73121078E12, 911.96], [1.7312136E12, 856.8500000000006], [1.73121096E12, 784.0], [1.73121198E12, 1152.699999999999], [1.7312142E12, 720.5000000000005], [1.7312148E12, 784.3200000000002], [1.73121258E12, 683.3899999999999], [1.73121156E12, 782.9300000000002], [1.73121318E12, 627.8599999999999], [1.73121216E12, 770.3199999999999], [1.73121378E12, 693.9900000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73121114E12, 222.0], [1.73121276E12, 221.0], [1.73121438E12, 223.0], [1.73121336E12, 221.0], [1.73121498E12, 229.0], [1.73121174E12, 233.0], [1.73121396E12, 229.0], [1.73121234E12, 225.0], [1.73121456E12, 223.0], [1.73121294E12, 221.0], [1.73121516E12, 215.5], [1.73121192E12, 224.0], [1.73121132E12, 224.0], [1.73121354E12, 226.0], [1.7312109E12, 223.0], [1.73121252E12, 225.0], [1.73121414E12, 221.0], [1.73121312E12, 224.0], [1.73121474E12, 222.0], [1.73121372E12, 228.0], [1.7312115E12, 230.0], [1.7312121E12, 225.0], [1.73121432E12, 223.0], [1.7312127E12, 221.0], [1.73121492E12, 228.0], [1.73121168E12, 226.0], [1.73121108E12, 219.0], [1.7312133E12, 221.0], [1.73121228E12, 230.0], [1.7312139E12, 229.0], [1.73121288E12, 223.0], [1.7312145E12, 223.0], [1.73121348E12, 225.0], [1.7312151E12, 226.0], [1.73121126E12, 224.0], [1.73121186E12, 225.0], [1.73121408E12, 225.0], [1.73121144E12, 223.0], [1.73121246E12, 227.0], [1.73121468E12, 224.0], [1.73121084E12, 224.0], [1.73121306E12, 226.0], [1.73121204E12, 222.0], [1.73121366E12, 229.0], [1.73121264E12, 226.0], [1.73121426E12, 228.0], [1.73121324E12, 222.0], [1.73121486E12, 232.0], [1.73121102E12, 220.0], [1.73121162E12, 231.0], [1.73121384E12, 229.0], [1.7312112E12, 233.0], [1.73121222E12, 229.0], [1.73121444E12, 219.0], [1.73121282E12, 229.0], [1.73121504E12, 233.0], [1.7312118E12, 230.0], [1.73121342E12, 221.0], [1.7312124E12, 226.0], [1.73121402E12, 219.0], [1.73121138E12, 225.0], [1.731213E12, 228.0], [1.73121462E12, 218.0], [1.73121078E12, 229.0], [1.7312136E12, 225.5], [1.73121096E12, 228.0], [1.73121198E12, 235.0], [1.7312142E12, 224.0], [1.7312148E12, 233.0], [1.73121258E12, 220.0], [1.73121156E12, 229.0], [1.73121318E12, 224.0], [1.73121216E12, 226.0], [1.73121378E12, 221.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73121114E12, 548.2499999999998], [1.73121276E12, 544.5999999999999], [1.73121438E12, 548.1999999999999], [1.73121336E12, 538.0], [1.73121498E12, 628.1999999999999], [1.73121174E12, 551.05], [1.73121396E12, 560.5], [1.73121234E12, 554.0], [1.73121456E12, 680.0], [1.73121294E12, 697.3], [1.73121516E12, 286.9], [1.73121192E12, 680.0], [1.73121132E12, 690.1499999999999], [1.73121354E12, 543.1999999999999], [1.7312109E12, 705.8], [1.73121252E12, 531.0999999999999], [1.73121414E12, 682.2], [1.73121312E12, 543.6999999999999], [1.73121474E12, 665.0], [1.73121372E12, 709.55], [1.7312115E12, 537.0], [1.7312121E12, 568.4999999999998], [1.73121432E12, 596.2999999999986], [1.7312127E12, 684.0], [1.73121492E12, 700.5999999999999], [1.73121168E12, 711.2], [1.73121108E12, 694.0], [1.7312133E12, 546.2000000000002], [1.73121228E12, 710.7], [1.7312139E12, 702.0], [1.73121288E12, 707.35], [1.7312145E12, 700.0], [1.73121348E12, 691.35], [1.7312151E12, 679.6], [1.73121126E12, 698.5999999999999], [1.73121186E12, 561.6499999999995], [1.73121408E12, 700.1999999999999], [1.73121144E12, 705.55], [1.73121246E12, 703.1499999999999], [1.73121468E12, 672.75], [1.73121084E12, 686.6999999999999], [1.73121306E12, 729.1999999999998], [1.73121204E12, 692.1999999999999], [1.73121366E12, 698.9], [1.73121264E12, 570.5], [1.73121426E12, 556.55], [1.73121324E12, 574.2], [1.73121486E12, 674.0], [1.73121102E12, 711.5999999999999], [1.73121162E12, 725.0], [1.73121384E12, 696.9999999999999], [1.7312112E12, 687.25], [1.73121222E12, 556.3999999999999], [1.73121444E12, 692.0], [1.73121282E12, 577.8999999999999], [1.73121504E12, 574.6499999999988], [1.7312118E12, 693.0], [1.73121342E12, 594.0], [1.7312124E12, 701.1999999999999], [1.73121402E12, 693.5999999999999], [1.73121138E12, 697.1], [1.731213E12, 541.4], [1.73121462E12, 695.75], [1.73121078E12, 690.8499999999999], [1.7312136E12, 717.25], [1.73121096E12, 707.0], [1.73121198E12, 740.5], [1.7312142E12, 565.75], [1.7312148E12, 681.8], [1.73121258E12, 540.6999999999999], [1.73121156E12, 719.2999999999997], [1.73121318E12, 548.3], [1.73121216E12, 577.0499999999998], [1.73121378E12, 592.4000000000001]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73121516E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 213.0, "minX": 1.0, "maxY": 307.0, "series": [{"data": [[8.0, 221.0], [2.0, 213.0], [9.0, 223.0], [10.0, 223.0], [11.0, 227.0], [12.0, 228.0], [3.0, 213.0], [13.0, 233.5], [14.0, 237.0], [15.0, 244.0], [4.0, 213.0], [16.0, 248.5], [1.0, 215.0], [17.0, 243.5], [18.0, 250.0], [19.0, 288.0], [5.0, 216.0], [20.0, 268.0], [21.0, 307.0], [6.0, 218.0], [24.0, 284.5], [7.0, 217.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 213.0, "minX": 1.0, "maxY": 307.0, "series": [{"data": [[8.0, 221.0], [2.0, 213.0], [9.0, 223.0], [10.0, 223.0], [11.0, 227.0], [12.0, 228.0], [3.0, 213.0], [13.0, 233.0], [14.0, 237.0], [15.0, 244.0], [4.0, 213.0], [16.0, 248.5], [1.0, 215.0], [17.0, 243.5], [18.0, 250.0], [19.0, 288.0], [5.0, 216.0], [20.0, 268.0], [21.0, 307.0], [6.0, 218.0], [24.0, 284.5], [7.0, 217.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0833333333333333, "minX": 1.73121078E12, "maxY": 10.066666666666666, "series": [{"data": [[1.73121114E12, 9.8], [1.73121276E12, 9.066666666666666], [1.73121438E12, 9.25], [1.73121336E12, 9.05], [1.73121498E12, 9.5], [1.73121174E12, 9.3], [1.73121396E12, 10.033333333333333], [1.73121234E12, 8.85], [1.73121456E12, 8.833333333333334], [1.73121294E12, 9.166666666666666], [1.73121516E12, 1.0833333333333333], [1.73121192E12, 8.966666666666667], [1.73121132E12, 9.333333333333334], [1.73121354E12, 9.133333333333333], [1.7312109E12, 9.4], [1.73121252E12, 8.65], [1.73121414E12, 8.566666666666666], [1.73121312E12, 9.416666666666666], [1.73121474E12, 8.916666666666666], [1.73121372E12, 9.2], [1.7312115E12, 9.566666666666666], [1.7312121E12, 8.966666666666667], [1.73121432E12, 8.866666666666667], [1.7312127E12, 9.05], [1.73121492E12, 8.766666666666667], [1.73121168E12, 8.916666666666666], [1.73121108E12, 8.733333333333333], [1.7312133E12, 9.1], [1.73121228E12, 9.116666666666667], [1.7312139E12, 9.316666666666666], [1.73121288E12, 9.183333333333334], [1.7312145E12, 8.916666666666666], [1.73121348E12, 9.2], [1.7312151E12, 9.066666666666666], [1.73121126E12, 9.4], [1.73121186E12, 9.683333333333334], [1.73121408E12, 9.45], [1.73121144E12, 8.383333333333333], [1.73121246E12, 9.6], [1.73121468E12, 9.75], [1.73121084E12, 8.866666666666667], [1.73121306E12, 9.3], [1.73121204E12, 8.616666666666667], [1.73121366E12, 9.3], [1.73121264E12, 9.133333333333333], [1.73121426E12, 8.716666666666667], [1.73121324E12, 9.133333333333333], [1.73121486E12, 9.483333333333333], [1.73121102E12, 8.95], [1.73121162E12, 8.883333333333333], [1.73121384E12, 9.8], [1.7312112E12, 9.133333333333333], [1.73121222E12, 9.85], [1.73121444E12, 8.333333333333334], [1.73121282E12, 9.483333333333333], [1.73121504E12, 9.55], [1.7312118E12, 9.283333333333333], [1.73121342E12, 9.116666666666667], [1.7312124E12, 9.266666666666667], [1.73121402E12, 8.283333333333333], [1.73121138E12, 9.2], [1.731213E12, 9.183333333333334], [1.73121462E12, 8.316666666666666], [1.73121078E12, 7.733333333333333], [1.7312136E12, 9.283333333333333], [1.73121096E12, 9.083333333333334], [1.73121198E12, 10.066666666666666], [1.7312142E12, 9.316666666666666], [1.7312148E12, 8.95], [1.73121258E12, 8.716666666666667], [1.73121156E12, 8.95], [1.73121318E12, 9.516666666666667], [1.73121216E12, 8.566666666666666], [1.73121378E12, 9.033333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73121516E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.73121078E12, "maxY": 10.15, "series": [{"data": [[1.73121114E12, 9.633333333333333], [1.73121276E12, 9.05], [1.73121438E12, 9.25], [1.73121336E12, 9.066666666666666], [1.73121498E12, 9.583333333333334], [1.73121174E12, 9.3], [1.73121396E12, 10.066666666666666], [1.73121234E12, 8.85], [1.73121456E12, 8.75], [1.73121294E12, 9.216666666666667], [1.73121516E12, 1.1], [1.73121192E12, 8.933333333333334], [1.73121132E12, 9.3], [1.73121354E12, 9.183333333333334], [1.7312109E12, 9.35], [1.73121252E12, 8.616666666666667], [1.73121414E12, 8.583333333333334], [1.73121312E12, 9.416666666666666], [1.73121474E12, 8.866666666666667], [1.73121372E12, 9.133333333333333], [1.7312115E12, 9.533333333333333], [1.7312121E12, 8.95], [1.73121432E12, 8.883333333333333], [1.7312127E12, 9.066666666666666], [1.73121492E12, 8.716666666666667], [1.73121168E12, 8.916666666666666], [1.73121108E12, 8.733333333333333], [1.7312133E12, 9.116666666666667], [1.73121228E12, 9.2], [1.7312139E12, 9.25], [1.73121288E12, 9.2], [1.7312145E12, 8.933333333333334], [1.73121348E12, 9.2], [1.7312151E12, 9.116666666666667], [1.73121126E12, 9.433333333333334], [1.73121186E12, 9.666666666666666], [1.73121408E12, 9.516666666666667], [1.73121144E12, 8.366666666666667], [1.73121246E12, 9.633333333333333], [1.73121468E12, 9.733333333333333], [1.73121084E12, 8.866666666666667], [1.73121306E12, 9.266666666666667], [1.73121204E12, 8.616666666666667], [1.73121366E12, 9.35], [1.73121264E12, 9.15], [1.73121426E12, 8.8], [1.73121324E12, 9.116666666666667], [1.73121486E12, 9.45], [1.73121102E12, 8.916666666666666], [1.73121162E12, 8.933333333333334], [1.73121384E12, 9.85], [1.7312112E12, 9.233333333333333], [1.73121222E12, 9.75], [1.73121444E12, 8.316666666666666], [1.73121282E12, 9.433333333333334], [1.73121504E12, 9.5], [1.7312118E12, 9.25], [1.73121342E12, 9.066666666666666], [1.7312124E12, 9.25], [1.73121402E12, 8.216666666666667], [1.73121138E12, 9.283333333333333], [1.731213E12, 9.183333333333334], [1.73121462E12, 8.4], [1.73121078E12, 7.7], [1.7312136E12, 9.233333333333333], [1.73121096E12, 9.15], [1.73121198E12, 10.15], [1.7312142E12, 9.233333333333333], [1.7312148E12, 9.016666666666667], [1.73121258E12, 8.7], [1.73121156E12, 8.966666666666667], [1.73121318E12, 9.55], [1.73121216E12, 8.6], [1.73121378E12, 9.033333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73121516E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.73121078E12, "maxY": 5.1, "series": [{"data": [[1.73121114E12, 4.8], [1.73121276E12, 4.466666666666667], [1.73121438E12, 4.65], [1.73121336E12, 4.383333333333334], [1.73121498E12, 4.833333333333333], [1.73121174E12, 4.75], [1.73121396E12, 5.05], [1.73121234E12, 4.333333333333333], [1.73121456E12, 4.483333333333333], [1.73121294E12, 4.733333333333333], [1.73121516E12, 0.5166666666666667], [1.73121192E12, 4.333333333333333], [1.73121132E12, 4.766666666666667], [1.73121354E12, 4.516666666666667], [1.7312109E12, 4.616666666666666], [1.73121252E12, 4.45], [1.73121414E12, 4.2], [1.73121312E12, 4.666666666666667], [1.73121474E12, 4.483333333333333], [1.73121372E12, 4.683333333333334], [1.7312115E12, 4.85], [1.7312121E12, 4.45], [1.73121432E12, 4.333333333333333], [1.7312127E12, 4.683333333333334], [1.73121492E12, 4.316666666666666], [1.73121168E12, 4.433333333333334], [1.73121108E12, 4.45], [1.7312133E12, 4.516666666666667], [1.73121228E12, 4.716666666666667], [1.7312139E12, 4.533333333333333], [1.73121288E12, 4.583333333333333], [1.7312145E12, 4.383333333333334], [1.73121348E12, 4.7], [1.7312151E12, 4.616666666666666], [1.73121126E12, 4.766666666666667], [1.73121186E12, 4.8], [1.73121408E12, 4.733333333333333], [1.73121144E12, 3.9833333333333334], [1.73121246E12, 4.833333333333333], [1.73121468E12, 4.866666666666666], [1.73121084E12, 4.616666666666666], [1.73121306E12, 4.55], [1.73121204E12, 4.483333333333333], [1.73121366E12, 4.716666666666667], [1.73121264E12, 4.566666666666666], [1.73121426E12, 4.5], [1.73121324E12, 4.7], [1.73121486E12, 4.683333333333334], [1.73121102E12, 4.533333333333333], [1.73121162E12, 4.333333333333333], [1.73121384E12, 4.883333333333334], [1.7312112E12, 4.45], [1.73121222E12, 4.9], [1.73121444E12, 4.216666666666667], [1.73121282E12, 4.633333333333334], [1.73121504E12, 4.75], [1.7312118E12, 4.633333333333334], [1.73121342E12, 4.616666666666666], [1.7312124E12, 4.55], [1.73121402E12, 4.233333333333333], [1.73121138E12, 4.7], [1.731213E12, 4.6], [1.73121462E12, 4.1], [1.73121078E12, 4.2], [1.7312136E12, 4.516666666666667], [1.73121096E12, 4.416666666666667], [1.73121198E12, 5.05], [1.7312142E12, 4.616666666666666], [1.7312148E12, 4.55], [1.73121258E12, 4.216666666666667], [1.73121156E12, 4.616666666666666], [1.73121318E12, 4.783333333333333], [1.73121216E12, 4.216666666666667], [1.73121378E12, 4.516666666666667]], "isOverall": false, "label": "bots_request-success", "isController": false}, {"data": [[1.73121114E12, 4.833333333333333], [1.73121276E12, 4.583333333333333], [1.73121438E12, 4.6], [1.73121336E12, 4.683333333333334], [1.73121498E12, 4.75], [1.73121174E12, 4.55], [1.73121396E12, 5.016666666666667], [1.73121234E12, 4.516666666666667], [1.73121456E12, 4.266666666666667], [1.73121294E12, 4.483333333333333], [1.73121516E12, 0.5833333333333334], [1.73121192E12, 4.6], [1.73121132E12, 4.533333333333333], [1.73121354E12, 4.666666666666667], [1.7312109E12, 4.733333333333333], [1.73121252E12, 4.166666666666667], [1.73121414E12, 4.383333333333334], [1.73121312E12, 4.75], [1.73121474E12, 4.383333333333334], [1.73121372E12, 4.45], [1.7312115E12, 4.683333333333334], [1.7312121E12, 4.5], [1.73121432E12, 4.55], [1.7312127E12, 4.383333333333334], [1.73121492E12, 4.4], [1.73121168E12, 4.483333333333333], [1.73121108E12, 4.283333333333333], [1.7312133E12, 4.6], [1.73121228E12, 4.483333333333333], [1.7312139E12, 4.716666666666667], [1.73121288E12, 4.616666666666666], [1.7312145E12, 4.55], [1.73121348E12, 4.5], [1.7312151E12, 4.5], [1.73121126E12, 4.666666666666667], [1.73121186E12, 4.866666666666666], [1.73121408E12, 4.783333333333333], [1.73121144E12, 4.383333333333334], [1.73121246E12, 4.8], [1.73121468E12, 4.866666666666666], [1.73121084E12, 4.25], [1.73121306E12, 4.716666666666667], [1.73121204E12, 4.133333333333334], [1.73121366E12, 4.633333333333334], [1.73121264E12, 4.583333333333333], [1.73121426E12, 4.3], [1.73121324E12, 4.416666666666667], [1.73121486E12, 4.766666666666667], [1.73121102E12, 4.383333333333334], [1.73121162E12, 4.6], [1.73121384E12, 4.966666666666667], [1.7312112E12, 4.783333333333333], [1.73121222E12, 4.85], [1.73121444E12, 4.1], [1.73121282E12, 4.8], [1.73121504E12, 4.75], [1.7312118E12, 4.616666666666666], [1.73121342E12, 4.45], [1.7312124E12, 4.7], [1.73121402E12, 3.9833333333333334], [1.73121138E12, 4.583333333333333], [1.731213E12, 4.583333333333333], [1.73121462E12, 4.3], [1.73121078E12, 3.5], [1.7312136E12, 4.716666666666667], [1.73121096E12, 4.733333333333333], [1.73121198E12, 5.1], [1.7312142E12, 4.616666666666666], [1.7312148E12, 4.466666666666667], [1.73121258E12, 4.483333333333333], [1.73121156E12, 4.35], [1.73121318E12, 4.766666666666667], [1.73121216E12, 4.383333333333334], [1.73121378E12, 4.516666666666667]], "isOverall": false, "label": "dialogues_request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73121516E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.73121078E12, "maxY": 10.15, "series": [{"data": [[1.73121114E12, 9.633333333333333], [1.73121276E12, 9.05], [1.73121438E12, 9.25], [1.73121336E12, 9.066666666666666], [1.73121498E12, 9.583333333333334], [1.73121174E12, 9.3], [1.73121396E12, 10.066666666666666], [1.73121234E12, 8.85], [1.73121456E12, 8.75], [1.73121294E12, 9.216666666666667], [1.73121516E12, 1.1], [1.73121192E12, 8.933333333333334], [1.73121132E12, 9.3], [1.73121354E12, 9.183333333333334], [1.7312109E12, 9.35], [1.73121252E12, 8.616666666666667], [1.73121414E12, 8.583333333333334], [1.73121312E12, 9.416666666666666], [1.73121474E12, 8.866666666666667], [1.73121372E12, 9.133333333333333], [1.7312115E12, 9.533333333333333], [1.7312121E12, 8.95], [1.73121432E12, 8.883333333333333], [1.7312127E12, 9.066666666666666], [1.73121492E12, 8.716666666666667], [1.73121168E12, 8.916666666666666], [1.73121108E12, 8.733333333333333], [1.7312133E12, 9.116666666666667], [1.73121228E12, 9.2], [1.7312139E12, 9.25], [1.73121288E12, 9.2], [1.7312145E12, 8.933333333333334], [1.73121348E12, 9.2], [1.7312151E12, 9.116666666666667], [1.73121126E12, 9.433333333333334], [1.73121186E12, 9.666666666666666], [1.73121408E12, 9.516666666666667], [1.73121144E12, 8.366666666666667], [1.73121246E12, 9.633333333333333], [1.73121468E12, 9.733333333333333], [1.73121084E12, 8.866666666666667], [1.73121306E12, 9.266666666666667], [1.73121204E12, 8.616666666666667], [1.73121366E12, 9.35], [1.73121264E12, 9.15], [1.73121426E12, 8.8], [1.73121324E12, 9.116666666666667], [1.73121486E12, 9.45], [1.73121102E12, 8.916666666666666], [1.73121162E12, 8.933333333333334], [1.73121384E12, 9.85], [1.7312112E12, 9.233333333333333], [1.73121222E12, 9.75], [1.73121444E12, 8.316666666666666], [1.73121282E12, 9.433333333333334], [1.73121504E12, 9.5], [1.7312118E12, 9.25], [1.73121342E12, 9.066666666666666], [1.7312124E12, 9.25], [1.73121402E12, 8.216666666666667], [1.73121138E12, 9.283333333333333], [1.731213E12, 9.183333333333334], [1.73121462E12, 8.4], [1.73121078E12, 7.7], [1.7312136E12, 9.233333333333333], [1.73121096E12, 9.15], [1.73121198E12, 10.15], [1.7312142E12, 9.233333333333333], [1.7312148E12, 9.016666666666667], [1.73121258E12, 8.7], [1.73121156E12, 8.966666666666667], [1.73121318E12, 9.55], [1.73121216E12, 8.6], [1.73121378E12, 9.033333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73121516E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

